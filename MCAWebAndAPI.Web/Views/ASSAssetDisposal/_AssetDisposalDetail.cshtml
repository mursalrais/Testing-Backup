@using MCAWebAndAPI.Model.ViewModel.Form.Asset



@model IEnumerable<AssetDisposalDetailVM>

@{
    var index = 0;
}

<div class="col-md-12" style="margin-bottom: 20px">
    @(Html.Kendo().Grid(Model)
        .Name("Details")
        .ToolBar(tools => tools.Create().Text("Add New"))
        .Editable(editable => editable.Mode(GridEditMode.InCell)
        .CreateAt(GridInsertRowPosition.Bottom))
        .Columns(columns =>
        {
            columns.Bound(p => p.AssetSubAsset).ClientTemplate("#= AssetSubAsset.Text #" +
                                   "<input type='hidden' class='asset' name='Details[#= getWorkingRelationshipDetails(data)#].AssetSubAsset.Value' value='#= AssetSubAsset.Value #' />"
                                 ).EditorViewData(new
                                 {
                                     DataTextField = "Text",
                                     DataValueField = "Value",
                                     ControllerName = "ASSAssignmentOfAsset",
                                     ActionName = "GetAssetSubSAssetGrid"
                                 });

            //columns.Bound(p => p.ProvinceFrom).ClientTemplate("#= ProvinceFrom.Text #" +
            //              "<input type='hidden' name='Details[#= getWorkingRelationshipDetails(data)#].ProvinceFrom.Value' value='#= ProvinceFrom.value #' />"
            //            ).EditorViewData(new
            //            {
            //                DataTextField = "Text",
            //                DataValueField = "Value",
            //                ControllerName = "ASSAssetTransfer",
            //                ActionName = "GetLocationMasterGrid"
            //            });



            columns.Bound(p => p.Remarks).ClientTemplate("#= Remarks #" +
            "<input type='hidden' name='Details[#= getWorkingRelationshipDetails(data)#].Remarks' value='#= Remarks #' />"
            );

            columns.Bound(p => p.Status).ClientTemplate("#= Status #" +
            "<input type='hidden' name='Details[#= getWorkingRelationshipDetails(data)#].Status' value='#= Status #' />"
            );

            //    columns.Bound(p => p.Remarks).ClientTemplate("#= Remarks #" +
            //    "<input type='hidden' name='Details[#= getWorkingRelationshipDetails(data)#].Remarks' value='#= Remarks #' />"
            //    );

            columns.Bound(p => p.ID).Hidden().ClientTemplate("#= ID #" +
          "<input type='hidden' name=Details[#= getWorkingRelationshipDetails(data)#].ID value=#= ID # />"


           );
            columns.Bound(p => p.EditMode).Hidden()
                                         .ClientTemplate("#= EditMode #<input type='hidden' name='Details[#= getWorkingRelationshipDetails(data)#].EditMode' value='#= EditMode #' />");
            columns.Command(command => command.Custom("Delete").HtmlAttributes(new { @class = "btn btn-danger" })
                        .Click("onDeleteKendoDetail")).Width(100);
        })
        .Events(e =>
        {
            e.Edit("onCustomEditKendoDetail");
            e.DataBound("onDataBoundWorkingRelationship");
        })
        .DataSource(dataSource => dataSource.Ajax()
                   .Model(model =>
                   {
                       model.Id(p => p.ID);
                       model.Field(m => m.AssetSubAsset).DefaultValue(AssetDisposalDetailVM.GetAssetSubAssetDefaultValue());
                       model.Field(p => p.Status).Editable(false);
                       model.Field(p => p.Remarks);
                       //model.Field(m => m.WBS).DefaultValue(AssetAcquisitionItemVM.GetWBSDefaultValue());
                   })
                   .ServerOperation(false)
        )
    )
</div>

<script>
    function getWorkingRelationshipDetails(dataItem) {
        var data = $("#Details").data("kendoGrid").dataSource.data();
        //data.set('AssetSubAsset', data.AssetSubAsset);
        return data.indexOf(dataItem);
    }

    function onCustomEditKendoDetail(e) {
        if (!e.model.isNew()) {
            var container = e.container;
            var tr = container.closest('tr');
            var data = this.dataItem(tr); //get the row data so it can be referred later
            // 1 is Item.Mode.UPDATED
            data.set("EditMode", 1);
        }
        if (isCustomAdd && e.model.isNew()) {
            isCustomAdd = false;
            $(e.container).find("[name='Details']").val(customRowDataItem.Details).change();
        }
    }
    function onDataBoundWorkingRelationship(e) {
        var grid = $("#Details").data("kendoGrid");
        hideDeletedRowKendoDetail(grid);
    }
</script>
