@using MCAWebAndAPI.Model.ViewModel.Form.Finance
@using MCAWebAndAPI.Model.ViewModel.Control

@model IEnumerable<EventBudgetItemVM>

@*
    Wireframe FIN04: Event Budget
*@

<div class="col-xs-12">
    @(Html.Kendo().Grid(Model)
    .Name("ItemDetails")
    .Editable(editable => editable.Mode(GridEditMode.InCell)
    .CreateAt(GridInsertRowPosition.Top))
    .ToolBar(tools => tools.Create().Text("Add New Item"))
    .Scrollable()
    .Columns(columns =>
    {
        columns.Bound(p => p.TypeOfExpense).ClientTemplate("#= TypeOfExpense #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].TypeOfExpense' value='#= TypeOfExpense #' />").Width(150);

        columns.Bound(p => p.Description).ClientTemplate("#= Description #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].Description' value='#= Description #' />").Width(150);


        columns.Bound(p => p.WBS).ClientTemplate("#= WBS.Text #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].WBS.Value' value='#= WBS.Value #' />")
                       .EditorViewData(new
                       {
                           DataTextField = "Text",
                           DataValueField = "Value",
                           ControllerName = "COMWBS",
                           ActionName = "GetAllByActivityAsJsonResult",
                           Filter = "filterWBS"
                       })
                       .Width(150);

        columns.Bound(p => p.GL).ClientTemplate("#= GL.Text #" +
                         "<input type='hidden' name='ItemDetails[#= getItem(data)#].GL.Value' value='#= GL.Value #' />"
                       )
                       .EditorViewData(new
                       {
                           DataTextField = "Text",
                           DataValueField = "Value",
                           ControllerName = "ComboBox",
                           ActionName = "GetGLMasters",

                       }).Width(150);

        columns.Bound(p => p.Quantity).ClientTemplate("#= Quantity #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].Quantity' value='#= calculateField(data).Quantity #' />").Width(170);

        columns.Bound(p => p.UoMQty).ClientTemplate("#= UoMQty #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].UoMQty' value='#= UoMQty #' />").Width(170);

        columns.Bound(p => p.Frequency).ClientTemplate("#= Frequency #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].Frequency' value='#= calculateField(data).Frequency #' />").Width(170);

        columns.Bound(p => p.UoMFreq).ClientTemplate("#= UoMFreq #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].UoMFreq' value='#= UoMFreq #' />").Width(170);

        columns.Bound(p => p.UnitPrice).ClientTemplate("#=kendo.toString(UnitPrice,'N2') #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].UnitPrice' value='#= calculateField(data).UnitPrice #' />").Width(170);

        columns.Bound(p => p.AmountPerItem).ClientTemplate("#=kendo.toString(AmountPerItem,'N2') #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].AmountPerItem' value='#= AmountPerItem #' />").Width(170);


        columns.Group(g => g
            .Title("Funding Mechanism")
            .Columns(x =>
            {
                x.Bound(p => p.DirectPayment).ClientTemplate("#=kendo.toString(DirectPayment,'N2') #" + "<input type='hidden' name='ItemDetails[#= getItem(data)#].DirectPayment' value='#= calculateSCADirect(data).DirectPayment #' />").Width(170);
                x.Bound(p => p.SCA).ClientTemplate("#=kendo.toString(SCA,'N2') #" + "<input type='hidden' name='ItemDetails[#= getItem(data)#].SCA' value='#= calculateSCADirect(data).SCA #' />").Width(170);
            })
           );

        columns.Bound(p => p.Remarks).ClientTemplate("#= Remarks #" +
            "<input type='hidden' name='ItemDetails[#= getItem(data)#].Remarks' value='#= Remarks #' />").Width(170);


        columns.Bound(p => p.ID).Hidden().ClientTemplate("#= ID #" +
               "<input type='hidden' name='ItemDetails[#= getItem(data)#].ID' value='#= ID #' />"
             );

        columns.Bound(p => p.EditMode).Hidden().ClientTemplate("#= EditMode #" +
                     "<input type='hidden' name='ItemDetails[#= getItem(data)#].EditMode' value='#= EditMode #' />"
        );

        columns.Command(command => command.Custom("Delete").HtmlAttributes(new { @class = "btn btn-danger" })
            .Click("onDeleteKendoDetail")).Width(100);
    })
     .Events(e =>
     {
         e.DataBound("onDataBoundItemDetails");
         e.Edit("onedit");
     })

    .DataSource(dataSource => dataSource.Ajax()
                   .Model(model =>
                   {
                       model.Id(p => p.ID);
                       model.Field(m => m.WBS).DefaultValue(EventBudgetItemVM.GetWBSDefaultValue());
                       model.Field(m => m.GL).DefaultValue(EventBudgetItemVM.GetGLDefaultValue());
                       model.Field(m => m.Frequency).DefaultValue(1);

                   })
                   .ServerOperation(false)
     )
    )
</div>

<script>

        function getItem(dataItem) {
            var data = $("#ItemDetails").data("kendoGrid").dataSource.data();
            return data.indexOf(dataItem);
        }

        function onDataBoundItemDetails(e) {
            var grid = $("#ItemDetails").data("kendoGrid");
            hideDeletedRowKendoDetail(grid);
            calculateTotal();
        }

        function calculateTotal()
        {
            var datasource = $("#ItemDetails").data("kendoGrid").dataSource.data();
            var totalAll = 0;
            var totalAllDP = 0;
            var totalAllSCA = 0;

            for (var i = 0; i < datasource.length; i++) {
                if (datasource[i].EditMode >= 0) {
                    totalAll = totalAll + datasource[i].AmountPerItem;
                    totalAllDP = totalAllDP + datasource[i].DirectPayment;
                    totalAllSCA = totalAllSCA + datasource[i].SCA;
                }
            }

            var totalDPControl = $('#TotalDirectPayment').data("kendoNumericTextBox");
            totalDPControl.value(totalAllDP);

            var totalSCAControl = $('#TotalSCA').data("kendoNumericTextBox");
            totalSCAControl.value(totalAllSCA);

            var totalIDRControl = $('#TotalIDR').data("kendoNumericTextBox");
            totalIDRControl.value(totalAll);

            var rate = $("#Rate").val();
            if (rate > 0) {
                var totalUSDControl = $('#TotalUSD').data("kendoNumericTextBox");
                totalUSDControl.value(totalAll / rate);
            }
        }

        function calculateField(data) {
            data.set("AmountPerItem", data.UnitPrice * data.Frequency * data.Quantity);

            return data;
        }

        function calculateSCADirect(data) {
            calculateTotal();
            return data;
        }

        function onedit(e) {
            onEditKendoDetail(e);
            var allItem = $(e.container).find('input[name="AmountPerItem"]');
            if (allItem !== 'undefined') {
                
            }
        }

        function filterWBS() {
            return {
                activityId: $("#Activity_Value").val()
            };
        }

        $(".k-grid-Delete").click(function (e) {
            calculateTotal();
        });
</script>
