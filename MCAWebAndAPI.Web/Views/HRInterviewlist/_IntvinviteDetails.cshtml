@using MCAWebAndAPI.Model.ViewModel.Form.HR

@model IEnumerable<ShortlistDetailVM>

<div class="col-xs-12">
    @(Html.Kendo().Grid(Model)
    .Name("ShortlistDetails")
    .Editable(editable => editable.Mode(GridEditMode.InCell)
    .CreateAt(GridInsertRowPosition.Bottom))
    .Columns(columns =>
    {
        columns.Bound(p => p.Candidate).ClientTemplate("<a readonly='readonly' href='#= CandidateUrl #' target='_parent'>#= Candidate #</a>" +
        "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].Candidate' value='#= Candidate #' />");

        columns.Bound(p => p.DocumentUrl).ClientTemplate("<a href='#= DocumentUrl #'>get file</a>");

        columns.Bound(p => p.GetStat).ClientTemplate("#= GetStat #" +
        "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].GetStat' value='#= GetStat #' />");

        columns.Bound(p => p.neednextintv).ClientTemplate("<input type='' id='ShortlistDetails[#= GetDetailShortlist(data)#].neednexttext' name='ShortlistDetails[#= GetDetailShortlist(data)#].neednexttext' value='#= neednextintv ? 'Yes' : 'No' #' style='width: 20px; border: none; background-color: transparent' />");

        columns.Bound(p => p.Remarks).ClientTemplate("#= Remarks #" +
        "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].Remarks' value='#= Remarks #' />");

        columns.Bound(p => p.ID).Hidden().ClientTemplate("#= ID #" +
          "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].ID' value='#= ID #' />"
        );

        columns.Bound(p => p.Candidatemail).Hidden().ClientTemplate("#= Candidatemail #" +
           "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].Candidatemail' value='#= Candidatemail #' />"
         );

        columns.Bound(p => p.EditMode).Hidden().ClientTemplate("#= EditMode #" +
           "<input type='hidden' name='ShortlistDetails[#= GetDetailShortlist(data)#].EditMode' value='#= EditMode #' />"
         );
       
    })
    .Events(e =>
    {
        e.Edit("onEditKendoDetail");
        e.DataBound("onDataBoundDependentDetails");
    })
    .DataSource(dataSource => dataSource.Ajax()
    .Model(model =>
    {
        model.Id(p => p.ID);

        model.Field(m => m.Status).DefaultValue(ShortlistDetailVM.GetStatusDefaultValue());
    })
    .ServerOperation(false)

    )
    )
</div>
<script>

    function GetDetailShortlist(dataItem) {
        var data = $("#ShortlistDetails").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onDataBoundDependentDetails(e) {
        var grid = $("#ShortlistDetails").data("kendoGrid");
        hideDeletedRowKendoDetail(grid);
        debugger;

        var data = this._data;

        for (var i = 0; i < this._data.length; i++) {
            var dataItem = data[i];
            var status = dataItem.GetStat;
            if (status == "Shortlisted") {
                //$("ShortlistDetails[" + i + "].neednexttext").addClass("hidden");
                //dataItem.set("neednextintv", "");
            }
            //var tr = $("#grid").find("[data-uid='" + dataItem.uid + "']");
            // use the table row (tr) and data item (dataItem)
        }
    }


    function onChangeKendoDetail(e) {
        var container = e.container;
        var tr = container.closest('tr');
        var data = this.dataItem(tr); //get the row data so it can be referred later
        // 1 is Item.Mode.UPDATED
        var day = data.CmpDate.getDay();
        var start = data.StartTime.getHours();
        var finish = data.FinishTime.getHours();
        var range;
        var rowgrid = $("#CompensatoryDetails").data("kendoGrid").tbody.find("tr");
        var i = -1
        var j = -1
        var tr = container.closest('tr');

        rowgrid.each(function (e) {
            i++;
            var xdate = $("#Dateid" + i).val();
            rowgrid.each(function (e) {
                j++;
                var ydate = $("#Dateid" + i).val();
                if (i !== j) {
                    if (xdate == ydate) {
                        alert("date you have chosen already exists")
                    }
                }
            });
        });

        if (start < finish) {
            range = finish - start
            data.set("CmpTotalHours", range);
            data.CmpTotalHours = range;
            data.set("TotalDay", range / 24)
        }

        data.set("EditMode", 1);
    }
</script>



