@using MCAWebAndAPI.Model.ViewModel.Form.HR
@using MCAWebAndAPI.Model.Common

@model PayrollRunVM

<div class="form-horizontal">
    <fieldset>
        <legend>Period Payroll</legend>
        <div class="row">
            <div class="col-sm-6">
                @using (Ajax.BeginForm("UpdatePeriodWorksheet", "HRPayroll", new AjaxOptions
                {
                    OnComplete = "onCompleteUpdatePeriod"
                }, new { id = "form-update-period" }))
                {
                    <div class="form-group">
                        @Html.Bootstrap().LabelFor(m => m.Period).Class("col-sm-4 control-label")
                        <div class="col-sm-8">
                           @Html.EditorFor(m => m.Period)
                        </div>
                    </div>
                    <button id="submit-button-update-period" class="btn btn-primary pull-right" type="submit">Set</button>
                }
            </div>
            <div class="col-sm-6"></div>
        </div>

        <legend>Payroll Worksheet Details</legend>
        <div class="row">
            <div class="col-sm-12">
                @(Html.Kendo().Grid<PayrollWorksheetDetailVM>()
                    .Name("PayrollWorksheetGrid")
                    .Columns(columns =>
                    {
                        columns.Bound(e => e.PayrollDate).Format("{0:dddd, MMM d, yyyy}").Width(200).Locked(true).Lockable(false);
                        columns.Bound(e => e.Last13thMonthDate).Format("{0:dddd, MMM d, yyyy}").Width(200).Locked(true);
                        columns.Bound(e => e.Name).Width(300).Locked(true);
                        columns.Bound(e => e.ProjectUnit).Width(200);
                        columns.Bound(e => e.Position).Width(200);
                        columns.Bound(e => e.JoinDate).Format("{0:dddd, MMM d, yyyy}").Width(200);
                        columns.Bound(e => e.DateOfNewPSA).Format("{0:dddd, MMM d, yyyy}").Width(200);
                        columns.Bound(e => e.LastWorkingDate).Format("{0:dddd, MMM d, yyyy}").Width(200);
                        columns.Bound(e => e.PSANumber).Width(200);
                        columns.Bound(e => e.DateOfNewFee).Format("{0:dddd, MMM d, yyyy}").Width(200);
                        columns.Bound(e => e.EndDate).Format("{0:dddd, MMM d, yyyy}").Width(200);
                        columns.Bound(e => e.MonthlyFeeMaster).Width(200);
                        columns.Bound(e => e.TotalWorkingDays).Width(200);
                        columns.Bound(e => e.PropotionalMonthlyFee).Width(200);
                        columns.Bound(e => e.Remarks).Width(200);
                        columns.Bound(e => e.DaysRequestUnpaid).Width(200);
                        columns.Bound(e => e.UnpaidDayOff).Width(200);
                        columns.Bound(e => e.Base).Width(200);
                        columns.Bound(e => e.Adjustment).Width(200);
                        columns.Bound(e => e.SpotAward).Width(200);
                        columns.Bound(e => e.RetentionPayment).Width(200);
                        columns.Bound(e => e.Overtime).Width(200);
                        columns.Bound(e => e.LastWorkingDatePSAGreaterThan).Width(200);
                        columns.Bound(e => e.LastWorkingDatePSALessThan).Width(200);
                        columns.Bound(e => e.ThirteenthMonthFinal).Width(200);
                        columns.Bound(e => e.BalanceWithoutPSA).Width(200);
                        columns.Bound(e => e.BalanceWithPSA).Width(200);
                        columns.Bound(e => e.DayOffBalance).Width(200);
                        columns.Bound(e => e.Payment).Width(200);
                        columns.Bound(e => e.Deduction).Width(200);
                        columns.Bound(e => e.TakeHomePay).Width(200);
                        columns.Bound(e => e.SavingFund).Width(200);
                        columns.Bound(e => e.BankAccountName).Width(200);
                        columns.Bound(e => e.Currency).Width(200);
                        columns.Bound(e => e.BankAccountNumber).Width(200);
                        columns.Bound(e => e.BankName).Width(200);
                        columns.Bound(e => e.BankBranchOffice).Width(200);
                    })
                    .Excel(excel => excel
                        .AllPages(true)
                        .Filterable(true)
                        .ForceProxy(true)
                        .ProxyURL(Url.Action("GridWorksheet_ExportExcel", "HRPayroll"))
                    )
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("GridWorksheet_Read", "HRPayroll"))
                        .PageSize(25)
                    )
                    .Pageable(pager => pager.PageSizes(true))
                    .Scrollable(scrollable => scrollable.Height(600))
                    .Reorderable(reorderable => reorderable.Columns(true))
                    .Resizable(resizable => resizable.Columns(true))
                    .Filterable()
                    .Sortable()
                    .Groupable()
                    .ColumnMenu()
                )
            </div>
        </div>
    </fieldset>

    <div class="form-actions">
        <div class="row">
            <div class="col-sm-12">
                <button id="display-previous-drafts-button" class="btn btn-primary">
                    <i class="fa fa-cloud-download" aria-hidden="true"></i>
                    Display Previous Drafts
                </button>
                <button id="save-as-draft-button" class="btn btn-primary">
                    <i class="fa fa-save"></i>
                    Save as Draft
                </button>
            </div>
        </div>
    </div>

</div>


@section scripts{

    <script>

        $(document).ready(function () {

            $("#save-as-draft-button").click(function (e) {
                // Trigger Export to Excel
                var grid = $("#PayrollWorksheetGrid").data("kendoGrid");
                grid.saveAsExcel();

                // Trigger Save as Draft
                var url = "/HRPayroll/GridWorksheet_SaveAsDraft";
                $.getJSON(url, function (data) {
                    showModalWindow(data.message);
                });
            });

            $("#display-previous-drafts-button").click(function (e) {
                var url = "/HRPayroll/DisplayPayrollWorksheetDrafts";
                window.location.href = url;
            })

        });

        function onCompleteUpdatePeriod(e) {
            $("#PayrollWorksheetGrid").data("kendoGrid").dataSource.read();
            $("#PayrollWorksheetGrid").data("kendoGrid").refresh();
        }

        function GridWorksheet_OnError(e) {
            showModalWindow("Grid Datasource Error");
        }

        function startChange() {
            var endPicker = $("#To").data("kendoDatePicker"),
                startDate = this.value();

            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                endPicker.min(startDate);
            }
        }

        function endChange() {
            var startPicker = $("#From").data("kendoDatePicker"),
                endDate = this.value();

            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                startPicker.max(endDate);
            }
        }

    </script>
}