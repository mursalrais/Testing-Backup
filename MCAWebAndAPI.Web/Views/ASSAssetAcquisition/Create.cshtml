@using MCAWebAndAPI.Model.ViewModel.Form.Asset

@model AssetAcquisitionVM

<form class="form-horizontal" method="post" action="/ASSAssetAcquisition/Submit" id="create-asset-acquisition-form">
    <fieldset>
        <legend>Form Asset Acquisition</legend>

        <div class="col-md-6">
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Header.TransactionType).Class("col-md-4 control-label")
                <div class="col-md-8">
                    @Html.DisplayFor(m => m.Header.TransactionType)
                </div>
            </div>
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Header.AcceptanceMemoNo).Class("col-md-4 control-label")
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Header.AcceptanceMemoNo)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Header.PurchaseDate).Class("col-md-4 control-label")
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Header.PurchaseDate)
                </div>
            </div>
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Header.PurchaseDescription).Class("col-md-4 control-label")
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Header.PurchaseDescription)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @(Html.Kendo().Grid(Model.Items)
                    .Name("asset-acquisition-items-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.CostUSD);
                        columns.Bound(p => p.AssetDescription);
                        columns.Bound(p => p.New);
                        columns.Bound(p => p.item);
                        columns.Bound(p => p.Id).EditorTemplateName("ReadOnlyTemplate");
                        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
                    })
                    .ToolBar(toolbar => toolbar.Create())
                    .Editable(editable => editable.Mode(GridEditMode.PopUp))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Events(events =>events.Error("error_handler"))
                        .Model(model => 
                        {
                            model.Id(p => p.Id);
                            model.Field(p => p.Id).Editable(false);
                        })
                        .Create(update => update.Action("EditingPopup_Create", "ASSAssetAcquisition"))
                        .Read(read => read.Action("Create", "ASSAssetAcquisition"))
                        .Update(update => update.Action("EditingPopup_Update", "ASSAssetAcquisition"))
                        .Destroy(update => update.Action("EditingPopup_Destroy", "ASSAssetAcquisition"))
                        )
                )
            </div>
        </div>

        <input class="k-button k-button-icontext k-grid-add" type="submit" />
    </fieldset>
    
</form>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

</script>

<script>
			var iFrameResizer = {
					messageCallback: function(message){
						alert(message,parentIFrame.getId());
					}
				}
</script>
<script type="text/javascript" src="~/Scripts/libs/indicator_jslink.js" defer></script>