@using MCAWebAndAPI.Model.ViewModel.Form.HR
@using MCAWebAndAPI.Web.Helpers

@model AdjustmentDataVM

@{
    ViewBag.Title = "Input Adjustment HR";
}

@using (Ajax.BeginForm("CreateAdjustmentData", "HRAdjustment", FormMethod.Post, new AjaxOptions
{
    OnBegin = "onBeginForm",
    OnComplete = "onCompleteForm",
    OnSuccess = "onSuccessFormEmbed",
    OnFailure = "onFailureForm"
}, new
{
    @class = "form-horizontal"
}))

{
    <fieldset>
        <input type="hidden" id="loadpage" value="0">

        <div class="row">
            <div class="form-group" id="ParentDiv">
                @Html.Bootstrap().LabelFor(m => m.periodDate).Class("col-xs-2 control-label")
                <div class="col-xs-2">
                    @Html.EditorFor(m => m.periodDate)
                </div>
            </div>
        </div>

        <legend>Adjustment & OT</legend>
        <div class="row">
            @Html.Partial("_InputAdjustmentDetails", Model.AdjustmentDetails)
        </div>

        <div class="row pull-right">
            <div class="col-sm-12">
                <button id="submit-button" class="btn btn-primary" type="button">
                    <i class="fa fa-save"></i>
                    Save
                </button>
            </div>
            </div>
    </fieldset>
}

@section scripts{

    <script>
        $(document).ready(function () {
            $("#submit-button").click(function (e) {
                var rowgrid = $("#AdjustmentDetails").data("kendoGrid").tbody.find("tr");
                var valdate = true;
                var i = -1;
                rowgrid.each(function (e) {
                    i++;
                    var xprof = $("#Profid" + i).val();
                    var xadjus = $("#ajusmentType" + i).val();
                    var xEdit = $("#Editid" + i).val();
                    var j = -1;
                    rowgrid.each(function (e) {
                        j++;
                        var yprof = $("#Profid" + j).val();
                        var yadjus = $("#ajusmentType" + j).val();
                        var yEdit = $("#Editid" + j).val();
                        if (i !== j) {
                            if (xprof != "undifined" && yprof != "undifined") {
                                if (xEdit != -1) {
                                    if (yEdit != -1) {
                                        if (xprof == yprof) {
                                            if (xadjus == yadjus)
                                            {
                                                valdate = false;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    });
                });

                var grid = $("#AdjustmentDetails").data("kendoGrid").dataSource.data();

                var valdatermk = true;
                for (var i = 0; i < grid.length; i++) {
                    if (grid[i].EditMode == 0) {
                        if (grid[i].remark == "") {
                            valdatermk = false;
                            break;
                        }
                    }
                }

                if (valdatermk == false) {
                    alert("remark must be inputed..!");
                } else if (valdate == false) {
                    alert("professional with same adjustment type already add in same period..!!");
                } else {
                    $("form").submit();
                }
            });
        });

        function getProfId(prof) {
            if (prof != null) {
                return prof.Value;
            };
        }

        function onAdjustChange(e) {
            if (e.action === "itemchange") {
                var model = e.items[0];
                var url = "/HRDataMaster/GetProfessionalActives/" + model.ddlProfessional.Value;
                $.getJSON(url, function (result) {
                    model.set('projUnit', (result[0].Project_Unit));
                    model.set('position', (result[0].Position));
                });
            }
        }

        function GetDetailAdjustment(dataItem) {
            var data = $("#AdjustmentDetails").data("kendoGrid").dataSource.data();
            return data.indexOf(dataItem);
        }

        function onDataBoundAdjustmentDetails(e) {
            var grid = $("#AdjustmentDetails").data("kendoGrid");
            hideDeletedRowKendoDetail(grid);
        }

    </script>
}





