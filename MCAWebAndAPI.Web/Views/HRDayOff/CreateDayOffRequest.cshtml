@using MCAWebAndAPI.Model.ViewModel.Form.HR

@model DayOffRequestVM

@{
    ViewBag.Title = "Form Create Day-Off Request";
}

@using (Ajax.BeginForm("CreateDayOffRequestData", "HRDayOff",
                                                                                                    FormMethod.Post,
                                                                                                    new AjaxOptions
                                                                                                    {
                                                                                                        OnBegin = "onBeginForm",
                                                                                                        OnComplete = "onCompleteForm",
                                                                                                        OnSuccess = "onSuccessFormEmbed",
                                                                                                        OnFailure = "onFailureForm"
                                                                                                    }, new { @class = "form-horizontal" }))
{
    <fieldset>
        <legend>Day-Off Request Header Data</legend>
        <div class="row">
            @Html.Partial("_DayOffRequestHeaderData", Model)
        </div>

        <legend>Current Day-Off Balance</legend>
    <div class="row">
        @Html.Partial("_DayOffCurrentBalance", Model.DayOffBalanceDetails)
    </div>

        <legend>Request for Day-Off</legend>
        <div class="row">
            @Html.Partial("_RequestForDayOff", Model.DayOffRequestDetails)
        </div>

        <div class="col-md-12">
            <button id="apply-button" class="btn btn-primary" type="button" onclick="validateDayOffRequest()">
                <i class="fa fa-save"></i>
                Apply
            </button>
        </div>

        <legend>Day-Off Request Display</legend>
        <div id="request-detail-display" class="row">
            
        </div>

        <legend>Day-Off Next Balance</legend>
        <div class="row">
            @Html.Partial("_DayOffNextBalance", Model.DayOffNextBalance)
        </div>
    </fieldset>

}

<div class="form-actions">
    <div class="row">
        <div class="col-md-12">
            <button id="submit-for-approval" class="btn btn-primary" type="button">
                <i class="fa fa-save"></i>
                Submit for Approval
            </button>
            <button id="submit-draft-button" class="btn btn-primary" type="button">
                <i class="fa fa-save"></i>
                Save as Draft
            </button>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#submit-for-approval").click(function () {
                $("#StatusForm").val("Pending Approval");
                $("form").submit();
            });
        });

        $(document).ready(function () {
            $("#submit-draft-button").click(function () {
                $("#StatusForm").val("Draft");
                $("form").submit();
            });
        });

        function validateDayOffRequest()
        {
            var lastWorkingDate = $("#LastWorkingDate").val();
            var dateTimeLastWorkingDate = new Date(lastWorkingDate);
            var balanceAnnualDayOff;
            var balanceSpecialDayOff;
            var balancePaternity;
            var balanceCompensatoryTime;
            var balanceMarriageOfProfessional;
            var balanceMarriageOfProfessionalChildren;
            var balanceCircumcisionOfProfessionalSon;
            var balanceBaptismOfProfessionalChildren;
            var balanceDeathOfProfessionalDependent;
            var balanceDeathOfProfessionalHousehold;
            var balanceProfessionalSeparationDate;
            var balanceMaternity;

            var dayOffRequestDayOffType = [];
            var dayOffRequestStarDate = [];
            var dayOffRequestEndDate = [];
            var dayOffRequestFullOrHalf = [];
            var dayOffRequestRemarks = [];
            var dayOffRewquestTotalDays = [];
            
            var rowgridBalanceDetail = $("#DayOffBalanceDetails").data("kendoGrid").tbody.find("tr");
            var j = 0;

            rowgridBalanceDetail.each(function (e) {
                var dayOffType = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text;

                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Annual Day-Off")
                {
                    balanceAnnualDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Special Day-Off")
                {
                    balanceSpecialDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Paternity")
                {
                    balancePaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional")
                {
                    balanceMarriageOfProfessional = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional's Children")
                {
                    balanceMarriageOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Circumcision of the Professional's Sons")
                {
                    balanceCircumcisionOfProfessionalSon = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Baptism of the Professional's Children")
                {
                    balanceBaptismOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws")
                {
                    balanceDeathOfProfessionalDependent = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of a member of the Professional’s household other than the Professional’s dependent or parent")
                {
                    balanceDeathOfProfessionalHousehold = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Professional’s separation date is on or after 19 of the month")
                {
                    balanceProfessionalSeparationDate = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Compensatory Time")
                {
                    balanceCompensatoryTime = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Maternity")
                {
                    balanceMaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                
                j++;
            });

            var rowgrid = $("#DayOffRequestDetails").data("kendoGrid").tbody.find("tr");
            var i = 0;
            var totalRequestAnnualDayOff = 0;
            var totalRequestSpecialDayOff = 0;
            var totalRequestPaternity = 0;
            var totalRequestMarriageOfProfessional = 0;
            var totalRequestCircumcisionOfProfessionalSon = 0;
            var totalRequestMarriageOfTheProfessionalChildren = 0;
            var totalRequestBaptismOfTheProfessionalChildren = 0;
            var totalRequestDeathOfProfessionalDependent = 0;
            var totalRequestDeathOfProfessionalHousehold = 0;
            var totalRequestProfessionalSeparationDate = 0;
            var totalRequestCompensatoryTime = 0;
            var totalRequestAnotherDayOffTypeDate = 0;

            rowgrid.each(function (e) {

                var startRequestDate = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].RequestStartDate;
                var dateStartRequestDate = startRequestDate.getDate();
                var monthStartRequestDate = startRequestDate.getMonth() + 1;
                var yearStartRequestDate = startRequestDate.getFullYear();
                var strStartRequestDate = monthStartRequestDate + '/' + dateStartRequestDate + '/' + yearStartRequestDate;

                var endRequestDate = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].RequestEndDate;
                var dateEndRequestDate = endRequestDate.getDate();
                var monthEndRequestDate = endRequestDate.getMonth() + 1;
                var yearEndRequestDate = endRequestDate.getFullYear();
                var strEndRequestDate = monthEndRequestDate + '/' + dateEndRequestDate + '/' + yearEndRequestDate;

                var masterDayOffTypeValue = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].MasterDayOffType.Value;

                if (masterDayOffTypeValue == "1")
                {
                    var textMasterDayOffTypeValue = "Annual Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "3")
                {
                    var textMasterDayOffTypeValue = "Sick Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "7")
                {
                    var textMasterDayOffTypeValue = "Special Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "24")
                {
                    var textMasterDayOffTypeValue = "Unpaid Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "24")
                {
                    var textMasterDayOffTypeValue = "Unpaid Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "8")
                {
                    var textMasterDayOffTypeValue = "Compensatory Time";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "8")
                {
                    var textMasterDayOffTypeValue = "Compensatory Time";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "9")
                {
                    var textMasterDayOffTypeValue = "Maternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "11")
                {
                    var textMasterDayOffTypeValue = "Miscarriage";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "10")
                {
                    var textMasterDayOffTypeValue = "Paternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "10")
                {
                    var textMasterDayOffTypeValue = "Paternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "12")
                {
                    var textMasterDayOffTypeValue = "Marriage of the Professional";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "13")
                {
                    var textMasterDayOffTypeValue = "Marriage of the Professional's Children";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "14")
                {
                    var textMasterDayOffTypeValue = "Circumcision of the Professional's Sons";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "15")
                {
                    var textMasterDayOffTypeValue = "Baptism of the Professional's Children";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "16")
                {
                    var textMasterDayOffTypeValue = "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "17")
                {
                    var textMasterDayOffTypeValue = "Death of a member of the Professional’s household other than the Professional’s dependent or parent";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "18")
                {
                    var textMasterDayOffTypeValue = "Professional’s separation date is on or after 19 of the month";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "19")
                {
                    var textMasterDayOffTypeValue = "Unscheduled closing of MCA-Indonesia office(s)";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "20")
                {
                    var textMasterDayOffTypeValue = "Voting Day";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "21")
                {
                    var textMasterDayOffTypeValue = "Service as  a court witness";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "22")
                {
                    var textMasterDayOffTypeValue = "Other";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }


                var fullHalfDay = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].FullHalf.Text;
                var woStrFullHalfDay = fullHalfDay.replace(/\s/g, '');

                var remarks = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].Remarks;
                var woStrRemarks = remarks.replace(/\s/g, '');

                var dateStartRequestDate = new Date(startRequestDate);
                var dateDateStartRequestDate = dateStartRequestDate.getDate();
                var monthDateStartRequestDate = dateStartRequestDate.getMonth() + 1;
                var yearDateStartRequestDate = dateStartRequestDate.getFullYear();
                var stringDateStartRequestDate = dateDateStartRequestDate + '/' + monthDateStartRequestDate + '/' + yearDateStartRequestDate;

                var dateEndRequestDate = new Date(endRequestDate);
                var dateDateEndRequestDate = dateEndRequestDate.getDate();
                var monthDateEndRequestDate = dateEndRequestDate.getMonth() + 1;
                var yearDateEndRequestDate = dateEndRequestDate.getFullYear();
                var stringDateEndRequestDate = dateDateEndRequestDate + '/' + monthDateEndRequestDate + '/' + yearDateEndRequestDate;

                if (dateStartRequestDate > dateEndRequestDate)
                {
                    alert("End Date must be more than Start Date");
                }
                else if (dateStartRequestDate < dateEndRequestDate)
                {
                    if (masterDayOffTypeValue == "9")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Maternity");
                        }
                        else if(fullHalfDay == "Full Day")
                        {
                            var setThreeMonthInDate = checkThreeMonth(dateStartRequestDate, dateEndRequestDate);

                            if(dateEndRequestDate > setThreeMonthInDate)
                            {
                                alert("Total Days Request is more than 3 Months");
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "11")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Miscarriage");
                        }
                        else if(fullHalfDay == "Full Day")
                        {
                            var dateSetDateInOneMonth = checkOneAndHalfMonth(dateStartRequestDate, dateEndRequestDate);

                            if (dateEndRequestDate > dateSetDateInOneMonth)
                            {
                                alert("Total Days Request is more than 1,5 Months");
                            }
                        }
                    }
                    else if (fullHalfDay == "Half Day")
                    {
                        alert("For Half Day, Start Date Must Be Same With End Date");
                    }
                    else if ((dateStartRequestDate > dateTimeLastWorkingDate) || (dateEndRequestDate > dateTimeLastWorkingDate))
                    {
                        alert("Your Start Request Date or End Request Date More Than Last Working Date");
                    }
                    else if (masterDayOffTypeValue == "1")
                    {
                        var requestAnnualDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);

                        var finalRequestAnnualDayOff = parseInt(requestAnnualDayOff) - parseInt(numberHolidays);

                        totalRequestAnnualDayOff = parseInt(totalRequestAnnualDayOff) + parseInt(finalRequestAnnualDayOff);

                        var intBalanceAnnualDayOff = parseInt(balanceAnnualDayOff);

                        if (totalRequestAnnualDayOff > intBalanceAnnualDayOff)
                        {
                            alert("Total Days Request is more than Total Annual Day-Off Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);

                            console.log("finalRequestAnnualDayOff: " + finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "7")
                    {
                        
                        var requestSpecialDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestSpecialDayOff = parseInt(requestSpecialDayOff) - parseInt(numberHolidays);

                        totalRequestSpecialDayOff = parseInt(totalRequestSpecialDayOff) + parseInt(finalRequestSpecialDayOff);

                        var intBalanceSpecialDayOff = parseInt(balanceSpecialDayOff);

                        if (totalRequestSpecialDayOff > intBalanceSpecialDayOff)
                        {
                            alert("Total Days Request is more than Total Special Day-Off Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestSpecialDayOff);
                        }

                    }
                    else if (masterDayOffTypeValue == "8")
                    {
                        var requestCompensatoryTime = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);

                        var finalRequestCompensatoryTime = parseInt(requestCompensatoryTime) - parseInt(numberHolidays);

                        totalRequestCompensatoryTime = parseInt(totalRequestCompensatoryTime) + parseInt(finalRequestCompensatoryTime);

                        var intBalanceCompensatoryTime = parseInt(balanceCompensatoryTime);

                        if (totalRequestCompensatoryTime > intBalanceCompensatoryTime)
                        {
                            alert("Total Days Request is more than Total Compensatory Time Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestCompensatoryTime);
                        }
                    }
                    else if (masterDayOffTypeValue == "10")
                    {
                        var requestPaternity = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestPaternity = parseInt(requestPaternity) - parseInt(numberHolidays);

                        totalRequestPaternity = parseInt(totalRequestPaternity) + parseInt(finalRequestPaternity);

                        var intBalancePaternity = parseInt(balancePaternity);

                        if (totalRequestPaternity > intBalancePaternity)
                        {
                            alert("Total Days Request is more than Total Paternity Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestPaternity);
                        }
                    }
                    else if (masterDayOffTypeValue == "12")
                    {
                        var requestMarriageOfProfessional = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessional = parseInt(requestMarriageOfProfessional) - parseInt(numberHolidays);

                        totalRequestMarriageOfProfessional = parseInt(totalRequestMarriageOfProfessional) + parseInt(finalRequestMarriageOfProfessional);

                        var intBalanceMarriageOfProfessional = parseInt(balanceMarriageOfProfessional);

                        if (totalRequestMarriageOfProfessional > intBalanceMarriageOfProfessional)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestMarriageOfProfessional);
                        }
                    }
                    else if (masterDayOffTypeValue == "13")
                    {
                        var requestMarriageOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessionalChildren = parseInt(requestMarriageOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestMarriageOfTheProfessionalChildren = parseInt(totalRequestMarriageOfTheProfessionalChildren) + parseInt(finalRequestMarriageOfProfessionalChildren);

                        var intBalanceMarriageOfProfessionalChildren = parseInt(balanceMarriageOfProfessionalChildren);

                        if (totalRequestMarriageOfTheProfessionalChildren > intBalanceMarriageOfProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional's Children Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestMarriageOfProfessionalChildren);
                        }
                    }
                    else if (masterDayOffTypeValue == "14")
                    {
                        var requestCircumcisionOfProfessionalSon = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCircumcisionOfProfessionalSon = parseInt(requestCircumcisionOfProfessionalSon) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestCircumcisionOfProfessionalSon);

                        var intBalanceBaptismOfProfessionalChildren = parseInt(balanceCircumcisionOfProfessionalSon);

                        if (totalRequestCircumcisionOfProfessionalSon > intBalanceCircumcisionOfProfessionalSon) {
                            alert("Total Days Request is more than Total Circumcision of Professional's Son Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestCircumcisionOfProfessionalSon);
                        }
                    }
                    else if (masterDayOffTypeValue == "15")
                    {
                        var requestBaptismOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestBaptismOfProfessionalChildren = parseInt(requestBaptismOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestBaptismOfProfessionalChildren);

                        var intBalanceBaptismOfTheProfessionalChildren = parseInt(balanceBaptismOfProfessionalChildren);

                        if (totalRequestBaptismOfTheProfessionalChildren > intBalanceBaptismOfTheProfessionalChildren) {
                            alert("Total Days Request is more than Total Baptism of The Professional's Children Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestBaptismOfProfessionalChildren);
                        }
                    }
                    else if (masterDayOffTypeValue == "16")
                    {
                        var requestDeathOfProfessionalDependent = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalDependent = parseInt(requestDeathOfProfessionalDependent) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalDependent = parseInt(totalRequestDeathOfProfessionalDependent) + parseInt(finalRequestDeathOfProfessionalDependent);

                        var intBalanceDeathOfProfessionalDependent = parseInt(balanceDeathOfProfessionalDependent);

                        if (totalRequestDeathOfProfessionalDependent > intBalanceDeathOfProfessionalDependent)
                        {
                            alert("Total Days Request is more than Total Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestDeathOfProfessionalDependent);
                        }
                    }
                    else if (masterDayOffTypeValue == "17")
                    {
                        var requestDeathOfProfessionalHousehold = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalHousehold = parseInt(requestDeathOfProfessionalHousehold) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalHousehold = parseInt(totalRequestDeathOfProfessionalHousehold) + parseInt(finalRequestDeathOfProfessionalHousehold);

                        var intBalanceDeatOfProfessionalHousehold = parseInt(balanceDeathOfProfessionalHousehold);

                        if (totalRequestDeathOfProfessionalHousehold > intBalanceDeatOfProfessionalHousehold)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s household other than the Professional’s dependent or parent Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestDeathOfProfessionalHousehold);
                        }
                    }
                    else if (masterDayOffTypeValue == "18")
                    {
                        var requestProfessionalSeparationDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestProfessionalSeparationDate = parseInt(requestProfessionalSeparationDate) - parseInt(numberHolidays);

                        totalRequestProfessionalSeparationDate = parseInt(totalRequestProfessionalSeparationDate) + parseInt(finalRequestProfessionalSeparationDate);

                        var intBalanceProfessionalSeparationDate = parseInt(balanceProfessionalSeparationDate);

                        if (totalRequestProfessionalSeparationDate > intBalanceProfessionalSeparationDate)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s separation date is on or after 19 of the month Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestProfessionalSeparationDate);
                        }
                    }
                    else
                    {
                        var requestAnotherDayOffTypeDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestAnotherDayOffTypeDate = parseInt(requestAnotherDayOffTypeDate) - parseInt(numberHolidays);

                        totalRequestAnotherDayOffTypeDate = parseInt(totalRequestAnotherDayOffTypeDate) + parseInt(finalRequestAnotherDayOffTypeDate);

                        dayOffRequestDayOffType.push(woStrMasterDayOffType);
                        dayOffRequestStarDate.push(strStartRequestDate);
                        dayOffRequestEndDate.push(strEndRequestDate);
                        dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                        dayOffRequestRemarks.push(woStrRemarks);
                        dayOffRewquestTotalDays.push(finalRequestAnotherDayOffTypeDate);
                    }
                }
                else
                {
                    if (masterDayOffTypeValue == "9")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Maternity");
                        }
                    }
                    else if (masterDayOffTypeValue == "11")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Miscarriage");
                        }
                    }
                    else if ((dateStartRequestDate > dateTimeLastWorkingDate) || (dateEndRequestDate > dateTimeLastWorkingDate))
                    {
                        alert("Your Start Request Date or End Request Date More Than Last Working Date");
                    }
                    else if (masterDayOffTypeValue == "1")
                    {
                        var requestAnnualDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestAnnualDayOff = parseInt(requestAnnualDayOff) - parseInt(numberHolidays);

                        totalRequestAnnualDayOff = parseInt(totalRequestAnnualDayOff) + parseInt(finalRequestAnnualDayOff);

                        var intBalanceAnnualDayOff = parseInt(balanceAnnualDayOff);

                        if (totalRequestAnnualDayOff > intBalanceAnnualDayOff)
                        {
                            alert("Total Days Request is more than Total Annual Day-Off Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day")
                            {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else
                            {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "7")
                    {
                        var requestSpecialDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestSpecialDayOff = parseInt(requestSpecialDayOff) - parseInt(numberHolidays);

                        totalRequestSpecialDayOff = parseInt(totalRequestSpecialDayOff) + parseInt(finalRequestSpecialDayOff);

                        var intBalanceSpecialDayOff = parseInt(balanceSpecialDayOff);

                        if (totalRequestSpecialDayOff > intBalanceSpecialDayOff)
                        {
                            alert("Total Days Request is more than Total Special Day-Off Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestSpecialDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "8")
                    {
                        var requestCompensatoryTime = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCompensatoryTime = parseInt(requestCompensatoryTime) - parseInt(numberHolidays);

                        totalRequestCompensatoryTime = parseInt(totalRequestCompensatoryTime) + parseInt(finalRequestCompensatoryTime);

                        var intBalanceCompensatoryTime = parseInt(balanceCompensatoryTime);

                        if (totalRequestCompensatoryTime > intBalanceCompensatoryTime) {
                            alert("Total Days Request is more than Total Compensatory Time Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestCompensatoryTime);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "10")
                    {
                        var requestPaternity = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestPaternity = parseInt(requestPaternity) - parseInt(numberHolidays);

                        totalRequestPaternity = parseInt(totalRequestPaternity) + parseInt(finalRequestPaternity);

                        var intBalancePaternity = parseInt(balancePaternity);

                        if (totalRequestPaternity > intBalancePaternity)
                        {
                            alert("Total Days Request is more than Total Paternity Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestPaternity);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "12")
                    {
                        var requestMarriageOfProfessional = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessional = parseInt(requestMarriageOfProfessional) - parseInt(numberHolidays);

                        totalRequestMarriageOfProfessional = parseInt(totalRequestMarriageOfProfessional) + parseInt(finalRequestMarriageOfProfessional);

                        var intBalanceMarriageOfProfessional = parseInt(balanceMarriageOfProfessional);

                        if (totalRequestMarriageOfProfessional > intBalanceMarriageOfProfessional)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestMarriageOfProfessional);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "13")
                    {
                        var requestMarriageOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessionalChildren = parseInt(requestMarriageOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestMarriageOfTheProfessionalChildren = parseInt(totalRequestMarriageOfTheProfessionalChildren) + parseInt(finalRequestMarriageOfProfessionalChildren);

                        var intBalanceMarriageOfProfessionalChildren = parseInt(balanceMarriageOfProfessionalChildren);

                        if (totalRequestMarriageOfTheProfessionalChildren > intBalanceMarriageOfProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional's Children Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestMarriageOfProfessionalChildren);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "14")
                    {
                        var requestCircumcisionOfProfessionalSon = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCircumcisionOfProfessionalSon = parseInt(requestCircumcisionOfProfessionalSon) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestCircumcisionOfProfessionalSon);

                        var intBalanceBaptismOfProfessionalChildren = parseInt(balanceCircumcisionOfProfessionalSon);

                        if (totalRequestCircumcisionOfProfessionalSon > intBalanceCircumcisionOfProfessionalSon)
                        {
                            alert("Total Days Request is more than Total Circumcision of Professional's Son Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestCircumcisionOfProfessionalSon);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "15")
                    {
                        var requestBaptismOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestBaptismOfProfessionalChildren = parseInt(requestBaptismOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestBaptismOfProfessionalChildren);

                        var intBalanceBaptismOfTheProfessionalChildren = parseInt(balanceBaptismOfProfessionalChildren);

                        if (totalRequestBaptismOfTheProfessionalChildren > intBalanceBaptismOfTheProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Baptism of The Professional's Children Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestBaptismOfProfessionalChildren);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "16")
                    {
                        var requestDeathOfProfessionalDependent = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalDependent = parseInt(requestDeathOfProfessionalDependent) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalDependent = parseInt(totalRequestDeathOfProfessionalDependent) + parseInt(finalRequestDeathOfProfessionalDependent);

                        var intBalanceDeathOfProfessionalDependent = parseInt(balanceDeathOfProfessionalDependent);

                        if (totalRequestDeathOfProfessionalDependent > intBalanceDeathOfProfessionalDependent)
                        {
                            alert("Total Days Request is more than Total Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestDeathOfProfessionalDependent);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "17")
                    {
                        var requestDeathOfProfessionalHousehold = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalHousehold = parseInt(requestDeathOfProfessionalHousehold) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalHousehold = parseInt(totalRequestDeathOfProfessionalHousehold) + parseInt(finalRequestDeathOfProfessionalHousehold);

                        var intBalanceDeatOfProfessionalHousehold = parseInt(balanceDeathOfProfessionalHousehold);

                        if (totalRequestDeathOfProfessionalHousehold > intBalanceDeatOfProfessionalHousehold)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s household other than the Professional’s dependent or parent Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestDeathOfProfessionalHousehold);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "18")
                    {
                        var requestProfessionalSeparationDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestProfessionalSeparationDate = parseInt(requestProfessionalSeparationDate) - parseInt(numberHolidays);

                        totalRequestProfessionalSeparationDate = parseInt(totalRequestProfessionalSeparationDate) + parseInt(finalRequestProfessionalSeparationDate);

                        var intBalanceProfessionalSeparationDate = parseInt(balanceProfessionalSeparationDate);

                        if (totalRequestProfessionalSeparationDate > intBalanceProfessionalSeparationDate)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s separation date is on or after 19 of the month Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestProfessionalSeparationDate);
                            }
                        }
                    }
                }

                i++;
            });

            if ((dayOffRequestDayOffType != null) && (dayOffRequestStarDate != null) && (dayOffRequestEndDate != null) && (dayOffRequestFullOrHalf != null) && (dayOffRequestRemarks != null))
            {
                

                var returnToWork = GetReturnToWork(dayOffRequestStarDate);

                var len = returnToWork.length;

                for (var i = 0; i < len ; i++)
                {
                    console.log("returnToWork: " + returnToWork[i]);
                }
                
                displayRequestDetail("request-detail-display", dayOffRequestDayOffType, dayOffRequestStarDate, dayOffRequestEndDate, dayOffRequestFullOrHalf, dayOffRequestRemarks, dayOffRewquestTotalDays, returnToWork)

                var requestLength = dayOffRequestDayOffType.length;
                var totalDayOffAnnualDayOff = 0;
                var totalDayOffSickDayOff = 0;

                for (var x = 0; x < requestLength; x++)
                {
                    if (dayOffRequestDayOffType[x] == "AnnualDay-Off")
                    {
                        totalDayOffAnnualDayOff = totalDayOffAnnualDayOff + dayOffRewquestTotalDays[x];
                        console.log("totalDayOffAnnualDayOff: " + totalDayOffAnnualDayOff);
                    }
                    if (dayOffRequestDayOffType[x] == "SickDay-Off")
                    {
                        totalDayOffSickDayOff = totalDayOffSickDayOff + dayOffRewquestTotalDays[x];
                    }

                    //console.log("dayOffRequestDayOffType: " + dayOffRequestDayOffType[x]);
                }

                UpdateNextBalanceAnnualDayOff(totalDayOffAnnualDayOff, "Annual Day-Off");

            }

        }

        function UpdateNextBalanceAnnualDayOff(totalDayOffAnnualDayOff, dayOffTypeAnnualDayOff)
        {
            var totalBalance = $("#DayOffNextBalance").data("kendoGrid").dataSource.data()[0].Balance;
            totalBalance = parseInt(totalBalance) - parseInt(totalDayOffAnnualDayOff);

            console.log("totalBalance: " + totalBalance);

            $("#DayOffNextBalance").data("kendoGrid").dataSource.[0].Balance = totalBalance;

            $("#DayOffNextBalance").data("kendoGrid").dataSource.[0].Balance.prop('value', to);
        }

        function displayNextBalance()
        {
            //var rowgridRequestDetailDisplay = $("#DayOffRequestDetailsDisplay").data("kendoGrid").tbody.find("tr");
            var rowgridRequest = $("#DayOffRequestDetailsDisplay").data("kendoGrid");
            var rowgridRequestDisplay = rowgridRequest.tbody.find("tr");
            var j = 0;

            rowgridRequestDisplay.each(function (e) {
                var dayOffTypeRequestDetailDisplay = $("#DayOffRequestDetailsDisplay").data("kendoGrid").dataSource.data()[j].DayOffType;

                console.log("dayOffType: " + dayOffTypeRequestDetailDisplay);

                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Annual Day-Off") {
                //    balanceAnnualDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Special Day-Off") {
                //    balanceSpecialDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Paternity") {
                //    balancePaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional") {
                //    balanceMarriageOfProfessional = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional's Children") {
                //    balanceMarriageOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Circumcision of the Professional's Sons") {
                //    balanceCircumcisionOfProfessionalSon = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Baptism of the Professional's Children") {
                //    balanceBaptismOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws") {
                //    balanceDeathOfProfessionalDependent = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of a member of the Professional’s household other than the Professional’s dependent or parent") {
                //    balanceDeathOfProfessionalHousehold = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Professional’s separation date is on or after 19 of the month") {
                //    balanceProfessionalSeparationDate = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Compensatory Time") {
                //    balanceCompensatoryTime = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}
                //if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Maternity") {
                //    balanceMaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                //}

                j++;
            });
        }

        function GetReturnToWork(dayOffRequestStarDate)
        {
            var rowgrid = $("#DayOffRequestDetails").data("kendoGrid").tbody.find("tr");
            var i = -1;
            var lengthRequest = dayOffRequestStarDate.length;

            var dayOffReturnToWork = [];
            
            rowgrid.each(function (e)
            {
                i++;
                var requestEndDate = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].RequestEndDate;
                
                var requestEndDates = new Date(requestEndDate);
                var returnToWork = requestEndDates.setDate(requestEndDates.getDate() + 1);
                var datesReturnToWork = new Date(returnToWork);
                var dayDatesReturnToWork = datesReturnToWork.getDay();
                var returnToWorkDate;

                var j = -1;
                rowgrid.each(function (e) {
                    j++;

                    if (i != j) {
                        var requestEndDateInneerLoop = new Date($("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[j].RequestEndDate);
                        var dateRequestEndDateInnerLoop = requestEndDateInneerLoop.getDate();
                        var monthRequestEndDateInnerLoop = requestEndDateInneerLoop.getMonth() + 1;
                        var yearRequestEndDateInnerLoop = requestEndDateInneerLoop.getFullYear();
                        var strRequestEndDateInnerLoop = monthRequestEndDateInnerLoop + '/' + dateRequestEndDateInnerLoop + '/' + yearRequestEndDateInnerLoop;

                        var requestStartDate = new Date($("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[j].RequestStartDate);
                        var dateRequestStartDate = requestStartDate.getDate();
                        var monthRequestStartDate = requestStartDate.getMonth() + 1;
                        var yearRequestStartDate = requestStartDate.getFullYear();
                        var strRequestStartDate = monthRequestStartDate + '/' + dateRequestStartDate + '/' + yearRequestStartDate;

                        var datesRequestStartDate = new Date(strRequestStartDate);
                        var datesRequestEndDateInnerLoop = new Date(strRequestEndDateInnerLoop);

                        if ((datesReturnToWork < datesRequestStartDate) || (datesReturnToWork > datesRequestEndDateInnerLoop)) {
                            var nameOfDayReturnToWork = checkWeekend(dayDatesReturnToWork);

                            if (nameOfDayReturnToWork == "Saturday") {
                                var AddTwoDays = datesReturnToWork.setDate(datesReturnToWork.getDate() + 2);
                                var dateAddTwoDays = new Date(AddTwoDays);
                                var datesDateAddTwoDays = dateAddTwoDays.getDate();
                                var monthDateAddTwoDays = dateAddTwoDays.getMonth() + 1;
                                var yearDateAddTwoDays = dateAddTwoDays.getFullYear();
                                var strDateAddTwoDays = monthDateAddTwoDays + '/' + datesDateAddTwoDays + '/' + yearDateAddTwoDays;

                                var numberOfPublicHoliday = checkPublicHoliday(strDateAddTwoDays);
                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDays = dateAddTwoDays.setDate(dateAddTwoDays.getDate() + 1);
                                    var dateAddOneDays = new Date(AddOneDays);
                                    var datesDateAddOneDays = dateAddOneDays.getDate();
                                    var monthDateAddOneDays = dateAddOneDays.getMonth() + 1;
                                    var yearDateAddOneDays = dateAddOneDays.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strDateAddTwoDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                            }
                            else if (nameOfDayReturnToWork == "Sunday") {
                                var AddOneDays = datesReturnToWork.setDate(datesReturnToWork.getDate() + 1);
                                var dateAddOneDays = new Date(AddOneDays);
                                var datesDateAddOneDays = dateAddOneDays.getDate();
                                var monthDateAddOneDays = dateAddOneDays.getMonth() + 1;
                                var yearDateAddOneDays = dateAddOneDays.getFullYear();
                                var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                var numberOfPublicHoliday = checkPublicHoliday(strDateAddAddOneDays);

                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDaysAgain = dateAddOneDays.setDate(dateAddOneDays.getDate() + 1);
                                    var dateAddOneDaysAgain = new Date(AddOneDaysAgain);
                                    var datesDateAddOneDaysAgain = dateAddOneDaysAgain.getDate();
                                    var monthDateAddOneDaysAgain = dateAddOneDaysAgain.getMonth() + 1;
                                    var yearDateAddOneDaysAgain = dateAddOneDaysAgain.getFullYear();
                                    var strDateAddAddOneDaysAgain = monthDateAddOneDaysAgain + '/' + datesDateAddOneDaysAgain + '/' + yearDateAddOneDaysAgain;

                                    returnToWorkDate = strDateAddAddOneDaysAgain;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                            }
                            else {
                                var dateReturnToWork = datesReturnToWork.getDate();
                                var monthReturnToWork = datesReturnToWork.getMonth() + 1;
                                var yearReturnToWork = datesReturnToWork.getFullYear();
                                var strReturnToWork = monthReturnToWork + '/' + dateReturnToWork + '/' + yearReturnToWork;

                                var numberOfPublicHoliday = checkPublicHoliday(strReturnToWork);

                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDaysAgain = dateAddOneDays.setDate(dateAddOneDays.getDate() + 1);
                                    var dateAddOneDaysAgain = new Date(AddOneDaysAgain);
                                    var datesDateAddOneDays = dateAddOneDays.getDate();
                                    var monthDateAddOneDays = dateAddOneDays.getMonth() + 1;
                                    var yearDateAddOneDays = dateAddOneDays.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strReturnToWork;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }

                            }
                        }
                        if ((datesReturnToWork >= datesRequestStartDate) && (datesReturnToWork <= datesRequestEndDateInnerLoop))
                        {
                            if ((lengthRequest - 1) != j)
                            {
                                var nextReturnToWork = new Date(requestEndDateInneerLoop);
                                var dateNextReturnToWork = new Date(nextReturnToWork.setDate(nextReturnToWork.getDate() + 1));
                                var dayNextReturnToWork = dateNextReturnToWork.getDay();
                                var nameOfDayReturnToWork = checkWeekend(dayNextReturnToWork);

                                console.log("dateNextReturnToWork: " + dateNextReturnToWork);

                                if (nameOfDayReturnToWork == "Saturday") {
                                    var AddTwoDays = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 2));
                                    var datesDateAddTwoDays = AddTwoDays.getDate();
                                    var monthDateAddTwoDays = AddTwoDays.getMonth() + 1;
                                    var yearDateAddTwoDays = AddTwoDays.getFullYear();
                                    var strDateAddTwoDays = monthDateAddTwoDays + '/' + datesDateAddTwoDays + '/' + yearDateAddTwoDays;

                                    var numberOfPublicHoliday = checkPublicHoliday(strDateAddTwoDays);
                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDays = new Date(AddTwoDays.setDate(dateAddTwoDays.getDate() + 1));
                                        var datesDateAddOneDays = AddOneDays.getDate();
                                        var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                        var yearDateAddOneDays = AddOneDays.getFullYear();
                                        var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                        returnToWorkDate = strDateAddAddOneDays;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                    else {
                                        returnToWorkDate = strDateAddTwoDays;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                }
                                else if (nameOfDayReturnToWork == "Sunday") {
                                    var AddOneDays = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 1));
                                    var datesDateAddOneDays = AddOneDays.getDate();
                                    var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                    var yearDateAddOneDays = AddOneDays.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    var numberOfPublicHoliday = checkPublicHoliday(strDateAddAddOneDays);

                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDaysAgain = new Date(AddOneDays.setDate(dateAddOneDays.getDate() + 1));
                                        var datesDateAddOneDaysAgain = AddOneDaysAgain.getDate();
                                        var monthDateAddOneDaysAgain = AddOneDaysAgain.getMonth() + 1;
                                        var yearDateAddOneDaysAgain = AddOneDaysAgain.getFullYear();
                                        var strDateAddAddOneDaysAgain = monthDateAddOneDaysAgain + '/' + datesDateAddOneDaysAgain + '/' + yearDateAddOneDaysAgain;

                                        returnToWorkDate = strDateAddAddOneDaysAgain;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                    else {
                                        returnToWorkDate = strDateAddAddOneDays;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                }
                                else {
                                    var dateReturnToWork = dateNextReturnToWork.getDate();
                                    var monthReturnToWork = dateNextReturnToWork.getMonth() + 1;
                                    var yearReturnToWork = dateNextReturnToWork.getFullYear();
                                    var strReturnToWork = monthReturnToWork + '/' + dateReturnToWork + '/' + yearReturnToWork;

                                    var numberOfPublicHoliday = checkPublicHoliday(strReturnToWork);

                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDaysAgain = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 1));
                                        var datesDateAddOneDays = AddOneDaysAgain.getDate();
                                        var monthDateAddOneDays = AddOneDaysAgain.getMonth() + 1;
                                        var yearDateAddOneDays = AddOneDaysAgain.getFullYear();
                                        var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                        returnToWorkDate = strDateAddAddOneDays;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                    else {
                                        returnToWorkDate = strReturnToWork;

                                        datesReturnToWork = new Date(returnToWorkDate);
                                        dayDatesReturnToWork = datesReturnToWork.getDay();

                                        console.log("datesReturnToWork: " + datesReturnToWork);
                                    }
                                }
                            }
                            else
                            {
                                var nextReturnToWork = new Date(requestEndDateInneerLoop);
                                var dateNextReturnToWork = new Date(nextReturnToWork.setDate(nextReturnToWork.getDate() + 1));
                                var dayNextReturnToWork = dateNextReturnToWork.getDay();
                                var nameOfDayReturnToWork = checkWeekend(dayNextReturnToWork);

                                if (nameOfDayReturnToWork == "Saturday") {
                                    var AddTwoDays = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 2));
                                    var datesDateAddTwoDays = AddTwoDays.getDate();
                                    var monthDateAddTwoDays = AddTwoDays.getMonth() + 1;
                                    var yearDateAddTwoDays = AddTwoDays.getFullYear();
                                    var strDateAddTwoDays = monthDateAddTwoDays + '/' + datesDateAddTwoDays + '/' + yearDateAddTwoDays;

                                    var numberOfPublicHoliday = checkPublicHoliday(strDateAddTwoDays);
                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDays = new Date(AddTwoDays.setDate(dateAddTwoDays.getDate() + 1));
                                        var datesDateAddOneDays = AddOneDays.getDate();
                                        var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                        var yearDateAddOneDays = AddOneDays.getFullYear();
                                        var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                        returnToWorkDate = strDateAddAddOneDays;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                    else {
                                        returnToWorkDate = strDateAddTwoDays;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                }
                                else if (nameOfDayReturnToWork == "Sunday") {
                                    var AddOneDays = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 1));
                                    var datesDateAddOneDays = AddOneDays.getDate();
                                    var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                    var yearDateAddOneDays = AddOneDays.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    var numberOfPublicHoliday = checkPublicHoliday(strDateAddAddOneDays);

                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDaysAgain = new Date(AddOneDays.setDate(dateAddOneDays.getDate() + 1));
                                        var datesDateAddOneDaysAgain = AddOneDaysAgain.getDate();
                                        var monthDateAddOneDaysAgain = AddOneDaysAgain.getMonth() + 1;
                                        var yearDateAddOneDaysAgain = AddOneDaysAgain.getFullYear();
                                        var strDateAddAddOneDaysAgain = monthDateAddOneDaysAgain + '/' + datesDateAddOneDaysAgain + '/' + yearDateAddOneDaysAgain;

                                        returnToWorkDate = strDateAddAddOneDaysAgain;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                    else {
                                        returnToWorkDate = strDateAddAddOneDays;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                }
                                else {
                                    var dateReturnToWork = dateNextReturnToWork.getDate();
                                    var monthReturnToWork = dateNextReturnToWork.getMonth() + 1;
                                    var yearReturnToWork = dateNextReturnToWork.getFullYear();
                                    var strReturnToWork = monthReturnToWork + '/' + dateReturnToWork + '/' + yearReturnToWork;

                                    var numberOfPublicHoliday = checkPublicHoliday(strReturnToWork);

                                    if (numberOfPublicHoliday > 0) {
                                        var AddOneDaysAgain = new Date(dateNextReturnToWork.setDate(dateNextReturnToWork.getDate() + 1));
                                        var datesDateAddOneDays = AddOneDaysAgain.getDate();
                                        var monthDateAddOneDays = AddOneDaysAgain.getMonth() + 1;
                                        var yearDateAddOneDays = AddOneDaysAgain.getFullYear();
                                        var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                        returnToWorkDate = strDateAddAddOneDays;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                    else {
                                        returnToWorkDate = strReturnToWork;

                                        console.log("returnToWorkDate: " + returnToWorkDate);
                                    }
                                }
                            }
                        }

                    }
                    else 
                    {
                        if (lengthRequest == 1)
                        {
                            var nameOfDayReturnToWork = checkWeekend(dayDatesReturnToWork);
                            if (nameOfDayReturnToWork == "Saturday") {
                                var AddTwoDays = new Date(datesReturnToWork.setDate(datesReturnToWork.getDate() + 2));
                                var datesDateAddTwoDays = AddTwoDays.getDate();
                                var monthDateAddTwoDays = AddTwoDays.getMonth() + 1;
                                var yearDateAddTwoDays = AddTwoDays.getFullYear();
                                var strDateAddTwoDays = monthDateAddTwoDays + '/' + datesDateAddTwoDays + '/' + yearDateAddTwoDays;

                                var numberOfPublicHoliday = checkPublicHoliday(strDateAddTwoDays);
                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDays = new Date(AddTwoDays.setDate(dateAddTwoDays.getDate() + 1));
                                    var datesDateAddOneDays = AddOneDays.getDate();
                                    var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                    var yearDateAddOneDays = AddOneDays.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strDateAddTwoDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                            }
                            else if (nameOfDayReturnToWork == "Sunday") {
                                var AddOneDays = new Date(datesReturnToWork.setDate(datesReturnToWork.getDate() + 1));
                                var datesDateAddOneDays = AddOneDays.getDate();
                                var monthDateAddOneDays = AddOneDays.getMonth() + 1;
                                var yearDateAddOneDays = AddOneDays.getFullYear();
                                var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                var numberOfPublicHoliday = checkPublicHoliday(strDateAddAddOneDays);

                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDaysAgain = new Date(AddOneDays.setDate(dateAddOneDays.getDate() + 1));
                                    var datesDateAddOneDaysAgain = AddOneDaysAgain.getDate();
                                    var monthDateAddOneDaysAgain = AddOneDaysAgain.getMonth() + 1;
                                    var yearDateAddOneDaysAgain = AddOneDaysAgain.getFullYear();
                                    var strDateAddAddOneDaysAgain = monthDateAddOneDaysAgain + '/' + datesDateAddOneDaysAgain + '/' + yearDateAddOneDaysAgain;

                                    returnToWorkDate = strDateAddAddOneDaysAgain;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                            }
                            else {
                                var dateReturnToWork = datesReturnToWork.getDate();
                                var monthReturnToWork = datesReturnToWork.getMonth() + 1;
                                var yearReturnToWork = datesReturnToWork.getFullYear();
                                var strReturnToWork = monthReturnToWork + '/' + dateReturnToWork + '/' + yearReturnToWork;

                                var numberOfPublicHoliday = checkPublicHoliday(strReturnToWork);

                                if (numberOfPublicHoliday > 0) {
                                    var AddOneDaysAgain = new Date(datesReturnToWork.setDate(datesReturnToWork.getDate() + 1));
                                    var datesDateAddOneDays = AddOneDaysAgain.getDate();
                                    var monthDateAddOneDays = AddOneDaysAgain.getMonth() + 1;
                                    var yearDateAddOneDays = AddOneDaysAgain.getFullYear();
                                    var strDateAddAddOneDays = monthDateAddOneDays + '/' + datesDateAddOneDays + '/' + yearDateAddOneDays;

                                    returnToWorkDate = strDateAddAddOneDays;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                                else {
                                    returnToWorkDate = strReturnToWork;

                                    console.log("returnToWorkDate: " + returnToWorkDate);
                                }
                            }
                        }
                        else
                        {
                            return;
                        }
                    }

                });

                dayOffReturnToWork.push(returnToWorkDate);
            });

            return dayOffReturnToWork;
        }

        function checkPublicHoliday(strReturnToWork)
        {
            var numberPublicHolidays = 0;
            var year2016 = "2016";
            var year2017 = "2017";
            var year2018 = "2018";

            var tahunBaru = new Date("01/01/2016");
            var dateTahunBaru = tahunBaru.getDate();
            var monthTahunBaru = tahunBaru.getMonth() + 1;
            var yearTahunBaru = tahunBaru.getFullYear();
            var strTahunBaru = dateTahunBaru + '/' + monthTahunBaru + '/' + yearTahunBaru;

            var tahunBaru2017 = new Date("01/01/2017");
            var dateTahunBaru2017 = tahunBaru2017.getDate();
            var monthTahunBaru2017 = tahunBaru2017.getMonth() + 1;
            var yearTahunBaru2017 = tahunBaru2017.getFullYear();
            var strTahunBaru2017 = dateTahunBaru2017 + '/' + monthTahunBaru2017 + '/' + yearTahunBaru2017;

            var tahunBaru2018 = new Date("01/01/2018");
            var dateTahunBaru2018 = tahunBaru2018.getDate();
            var monthTahunBaru2018 = tahunBaru2018.getMonth() + 1;
            var yearTahunBaru2018 = tahunBaru2018.getFullYear();
            var strTahunBaru2018 = dateTahunBaru2018 + '/' + monthTahunBaru2018 + '/' + yearTahunBaru2018;

            var imlek = new Date("02/08/2016");
            var dateImlek = imlek.getDate();
            var monthImlek = imlek.getMonth() + 1;
            var yearImlek = imlek.getFullYear();
            var strImlek = dateImlek + '/' + monthImlek + '/' + yearImlek;

            var imlek2017 = new Date("01/28/2017");
            var dateImlek2017 = imlek2017.getDate();
            var monthImlek2017 = imlek2017.getMonth() + 1;
            var yearImlek2017 = imlek2017.getFullYear();
            var strImlek2017 = dateImlek2017 + '/' + monthImlek2017 + '/' + yearImlek2017;

            var imlek2018 = new Date("02/16/2018");
            var dateImlek2018 = imlek2018.getDate();
            var monthImlek2018 = imlek2018.getMonth() + 1;
            var yearImlek2018 = imlek2018.getFullYear();
            var strImlek2018 = dateImlek2018 + '/' + monthImlek2018 + '/' + yearImlek2018;

            var idulAdha = new Date("09/12/2016");
            var dateIdulAdha = idulAdha.getDate();
            var monthIdulAdha = idulAdha.getMonth() + 1;
            var yearIdulAdha = idulAdha.getFullYear();
            var strIdulAdha = dateIdulAdha + '/' + monthIdulAdha + '/' + yearIdulAdha;

            var idulAdha2017 = new Date("09/01/2017");
            var dateIdulAdha2017 = idulAdha2017.getDate();
            var monthIdulAdha2017 = idulAdha2017.getMonth() + 1;
            var yearIdulAdha2017 = idulAdha2017.getFullYear();
            var strIdulAdha2017 = dateIdulAdha2017 + '/' + monthIdulAdha2017 + '/' + yearIdulAdha2017;

            var idulAdha2018 = new Date("08/22/2018");
            var dateIdulAdha2018 = idulAdha2018.getDate();
            var monthIdulAdha2018 = idulAdha2018.getMonth() + 1;
            var yearIdulAdha2018 = idulAdha2018.getFullYear();
            var strIdulAdha2018 = dateIdulAdha2018 + '/' + monthIdulAdha2018 + '/' + yearIdulAdha2018;

            var nyepi = new Date("03/09/2016");
            var dateNyepi = nyepi.getDate();
            var monthNyepi = nyepi.getMonth() + 1;
            var yearNyepi = nyepi.getFullYear();
            var strNyepi = dateNyepi + '/' + monthNyepi + '/' + yearNyepi;

            var nyepi2017 = new Date("03/28/2017");
            var dateNyepi2017 = nyepi2017.getDate();
            var monthNyepi2017 = nyepi2017.getMonth() + 1;
            var yearNyepi2017 = nyepi2017.getFullYear();
            var strNyepi2017 = dateNyepi2017 + '/' + monthNyepi2017 + '/' + yearNyepi2017;

            var nyepi2018 = new Date("03/18/2018");
            var dateNyepi2018 = nyepi2018.getDate();
            var monthNyepi2018 = nyepi2018.getMonth() + 1;
            var yearNyepi2018 = nyepi2018.getFullYear();
            var strNyepi2018 = dateNyepi2018 + '/' + monthNyepi2018 + '/' + yearNyepi2018;

            var wafatIsaAlMasih = new Date("03/25/2016");
            var dateWafatIsaAlMasih = wafatIsaAlMasih.getDate();
            var monthWafatIsaAlMasih = wafatIsaAlMasih.getMonth() + 1;
            var yearWafatIsaAlMasih = wafatIsaAlMasih.getFullYear();
            var strWafatIsaAlMasih = dateWafatIsaAlMasih + '/' + monthWafatIsaAlMasih + '/' + yearWafatIsaAlMasih;

            var wafatIsaAlMasih2017 = new Date("04/14/2017");
            var dateWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getDate();
            var monthWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getMonth() + 1;
            var yearWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getFullYear();
            var strWafatIsaAlMasih2017 = dateWafatIsaAlMasih2017 + '/' + monthWafatIsaAlMasih2017 + '/' + yearWafatIsaAlMasih2017;

            var wafatIsaAlMasih2018 = new Date("03/30/2018");
            var dateWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getDate();
            var monthWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getMonth() + 1;
            var yearWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getFullYear();
            var strWafatIsaAlMasih2018 = dateWafatIsaAlMasih2018 + '/' + monthWafatIsaAlMasih2018 + '/' + yearWafatIsaAlMasih2018;

            var hariBuruh = new Date("05/01/2016");
            var dateHariBuruh = hariBuruh.getDate();
            var monthHariBuruh = hariBuruh.getMonth() + 1;
            var yearHariBuruh = hariBuruh.getFullYear();
            var strHariBuruh = dateHariBuruh + '/' + monthHariBuruh + '/' + yearHariBuruh;

            var hariBuruh2017 = new Date("05/01/2017");
            var dateHariBuruh2017 = hariBuruh2017.getDate();
            var monthHariBuruh2017 = hariBuruh2017.getMonth() + 1;
            var yearHariBuruh2017 = hariBuruh2017.getFullYear();
            var strHariBuruh2017 = dateHariBuruh2017 + '/' + monthHariBuruh2017 + '/' + yearHariBuruh2017;

            var hariBuruh2018 = new Date("05/01/2018");
            var dateHariBuruh2018 = hariBuruh2018.getDate();
            var monthHariBuruh2018 = hariBuruh2018.getMonth() + 1;
            var yearHariBuruh2018 = hariBuruh2018.getFullYear();
            var strHariBuruh2018 = dateHariBuruh2018 + '/' + monthHariBuruh2018 + '/' + yearHariBuruh2018;

            var kenaikanYesus = new Date("05/05/2016");
            var dateKenaikanYesus = kenaikanYesus.getDate();
            var monthKenaikanYesus = kenaikanYesus.getMonth() + 1;
            var yearKenaikanYesus = kenaikanYesus.getFullYear();
            var strKenaikanYesus = dateKenaikanYesus + '/' + monthKenaikanYesus + '/' + yearKenaikanYesus;

            var kenaikanYesus2017 = new Date("05/25/2017");
            var dateKenaikanYesus2017 = kenaikanYesus2017.getDate();
            var monthKenaikanYesus2017 = kenaikanYesus2017.getMonth() + 1;
            var yearKenaikanYesus2017 = kenaikanYesus2017.getFullYear();
            var strKenaikanYesus2017 = dateKenaikanYesus2017 + '/' + monthKenaikanYesus2017 + '/' + yearKenaikanYesus2017;

            var kenaikanYesus2018 = new Date("05/10/2018");
            var dateKenaikanYesus2018 = kenaikanYesus2018.getDate();
            var monthKenaikanYesus2018 = kenaikanYesus2018.getMonth() + 1;
            var yearKenaikanYesus2018 = kenaikanYesus2018.getFullYear();
            var strKenaikanYesus2018 = dateKenaikanYesus2018 + '/' + monthKenaikanYesus2018 + '/' + yearKenaikanYesus2018;

            var israMiraj = new Date("05/06/2016");
            var dateIsraMiraj = israMiraj.getDate();
            var monthIsraMiraj = israMiraj.getMonth() + 1;
            var yearIsraMiraj = israMiraj.getFullYear();
            var strIsraMiraj = dateIsraMiraj + '/' + monthIsraMiraj + '/' + yearIsraMiraj;

            var israMiraj2017 = new Date("04/24/2017");
            var dateIsraMiraj2017 = israMiraj2017.getDate();
            var monthIsraMiraj2017 = israMiraj2017.getMonth() + 1;
            var yearIsraMiraj2017 = israMiraj2017.getFullYear();
            var strIsraMiraj2017 = dateIsraMiraj2017 + '/' + monthIsraMiraj2017 + '/' + yearIsraMiraj2017;

            var israMiraj2018 = new Date("04/13/2018");
            var dateIsraMiraj2018 = israMiraj2018.getDate();
            var monthIsraMiraj2018 = israMiraj2018.getMonth() + 1;
            var yearIsraMiraj2018 = israMiraj2018.getFullYear();
            var strIsraMiraj2018 = dateIsraMiraj2018 + '/' + monthIsraMiraj2018 + '/' + yearIsraMiraj2018;

            var waisak = new Date("05/22/2016");
            var dateWaisak = waisak.getDate();
            var monthWaisak = waisak.getMonth() + 1;
            var yearWaisak = waisak.getFullYear();
            var strWaisak = dateWaisak + '/' + monthWaisak + '/' + yearWaisak;

            var waisak2017 = new Date("05/11/2017");
            var dateWaisak2017 = waisak2017.getDate();
            var monthWaisak2017 = waisak2017.getMonth() + 1;
            var yearWaisak2017 = waisak2017.getFullYear();
            var strWaisak2017 = dateWaisak2017 + '/' + monthWaisak2017 + '/' + yearWaisak2017;

            var waisak2018 = new Date("05/29/2018");
            var dateWaisak2018 = waisak2018.getDate();
            var monthWaisak2018 = waisak2018.getMonth() + 1;
            var yearWaisak2018 = waisak2018.getFullYear();
            var strWaisak2018 = dateWaisak2018 + '/' + monthWaisak2018 + '/' + yearWaisak2018;

            var idulFitri1 = new Date("07/06/2016");
            var dateIdulFitri1 = idulFitri1.getDate();
            var monthIdulFitri1 = idulFitri1.getMonth() + 1;
            var yearIdulFitri1 = idulFitri1.getFullYear();
            var strIdulFitri1 = dateIdulFitri1 + '/' + monthIdulFitri1 + '/' + yearIdulFitri1;

            var idulFitri12017 = new Date("06/25/2017");
            var dateIdulFitri12017 = idulFitri12017.getDate();
            var monthIdulFitri12017 = idulFitri12017.getMonth() + 1;
            var yearIdulFitri12017 = idulFitri12017.getFullYear();
            var strIdulFitri12017 = dateIdulFitri12017 + '/' + monthIdulFitri12017 + '/' + yearIdulFitri12017;

            var idulFitri12018 = new Date("06/15/2018");
            var dateIdulFitri12018 = idulFitri12018.getDate();
            var monthIdulFitri12018 = idulFitri12018.getMonth() + 1;
            var yearIdulFitri12018 = idulFitri12018.getFullYear();
            var strIdulFitri12018 = dateIdulFitri12018 + '/' + monthIdulFitri12018 + '/' + yearIdulFitri12018;

            var idulFitri2 = new Date("07/07/2016");
            var dateIdulFitri2 = idulFitri2.getDate();
            var monthIdulFitri2 = idulFitri2.getMonth() + 1;
            var yearIdulFitri2 = idulFitri2.getFullYear();
            var strIdulFitri2 = dateIdulFitri2 + '/' + monthIdulFitri2 + '/' + yearIdulFitri2;

            var idulFitri22017 = new Date("06/26/2017");
            var dateIdulFitri22017 = idulFitri22017.getDate();
            var monthIdulFitri22017 = idulFitri22017.getMonth() + 1;
            var yearIdulFitri22017 = idulFitri22017.getFullYear();
            var strIdulFitri22017 = dateIdulFitri22017 + '/' + monthIdulFitri22017 + '/' + yearIdulFitri22017;

            var idulFitri22018 = new Date("06/16/2018");
            var dateIdulFitri22018 = idulFitri22018.getDate();
            var monthIdulFitri22018 = idulFitri22018.getMonth() + 1;
            var yearIdulFitri22018 = idulFitri22018.getFullYear();
            var strIdulFitri22018 = dateIdulFitri22018 + '/' + monthIdulFitri22018 + '/' + yearIdulFitri22018;

            var hutRI = new Date("08/17/2016");
            var dateHUTRI = hutRI.getDate();
            var monthHUTRI = hutRI.getMonth() + 1;
            var yearHUTRI = hutRI.getFullYear();
            var strHUTRI = dateHUTRI + '/' + monthHUTRI + '/' + yearHUTRI;

            var hutRI2017 = new Date("08/17/2017");
            var dateHUTRI2017 = hutRI2017.getDate();
            var monthHUTRI2017 = hutRI2017.getMonth() + 1;
            var yearHUTRI2017 = hutRI2017.getFullYear();
            var strHUTRI2017 = dateHUTRI2017 + '/' + monthHUTRI2017 + '/' + yearHUTRI2017;

            var hutRI2018 = new Date("08/17/2018");
            var dateHUTRI2018 = hutRI2018.getDate();
            var monthHUTRI2018 = hutRI2018.getMonth() + 1;
            var yearHUTRI2018 = hutRI2018.getFullYear();
            var strHUTRI2018 = dateHUTRI2018 + '/' + monthHUTRI2018 + '/' + yearHUTRI2018;

            var tahunBaruIslam = new Date("10/02/2016");
            var dateTahunBaruIslam = tahunBaruIslam.getDate();
            var monthTahunBaruIslam = tahunBaruIslam.getMonth() + 1;
            var yearTahunBaruIslam = tahunBaruIslam.getFullYear();
            var strTahunBaruIslam = dateTahunBaruIslam + '/' + monthTahunBaruIslam + '/' + yearTahunBaruIslam;

            var tahunBaruIslam2017 = new Date("09/21/2017");
            var dateTahunBaruIslam2017 = tahunBaruIslam2017.getDate();
            var monthTahunBaruIslam2017 = tahunBaruIslam2017.getMonth() + 1;
            var yearTahunBaruIslam2017 = tahunBaruIslam2017.getFullYear();
            var strTahunBaruIslam2017 = dateTahunBaruIslam2017 + '/' + monthTahunBaruIslam2017 + '/' + yearTahunBaruIslam2017;

            var tahunBaruIslam2018 = new Date("09/12/2018");
            var dateTahunBaruIslam2018 = tahunBaruIslam2018.getDate();
            var monthTahunBaruIslam2018 = tahunBaruIslam2018.getMonth() + 1;
            var yearTahunBaruIslam2018 = tahunBaruIslam2018.getFullYear();
            var strTahunBaruIslam2018 = dateTahunBaruIslam2018 + '/' + monthTahunBaruIslam2018 + '/' + yearTahunBaruIslam2018;

            var maulidNabi = new Date("12/12/2016");
            var dateMaulidNabi = maulidNabi.getDate();
            var monthMaulidNabi = maulidNabi.getMonth() + 1;
            var yearMaulidNabi = maulidNabi.getFullYear();
            var strMaulidNabi = dateMaulidNabi + '/' + monthMaulidNabi + '/' + yearMaulidNabi;

            var maulidNabi2017 = new Date("12/01/2017");
            var dateMaulidNabi2017 = maulidNabi2017.getDate();
            var monthMaulidNabi2017 = maulidNabi2017.getMonth() + 1;
            var yearMaulidNabi2017 = maulidNabi2017.getFullYear();
            var strMaulidNabi2017 = dateMaulidNabi2017 + '/' + monthMaulidNabi2017 + '/' + yearMaulidNabi2017;

            var maulidNabi2018 = new Date("11/20/2018");
            var dateMaulidNabi2018 = maulidNabi2018.getDate();
            var monthMaulidNabi2018 = maulidNabi2018.getMonth() + 1;
            var yearMaulidNabi2018 = maulidNabi2018.getFullYear();
            var strMaulidNabi2018 = dateMaulidNabi2018 + '/' + monthMaulidNabi2018 + '/' + yearMaulidNabi;

            var natal = new Date("12/25/2016");
            var dateNatal = natal.getDate();
            var monthNatal = natal.getMonth() + 1;
            var yearNatal = natal.getFullYear();
            var strNatal = dateNatal + '/' + monthNatal + '/' + yearNatal;

            var natal2017 = new Date("12/25/2017");
            var dateNatal2017 = natal2017.getDate();
            var monthNatal2017 = natal2017.getMonth() + 1;
            var yearNatal2017 = natal2017.getFullYear();
            var strNatal2017 = dateNatal2017 + '/' + monthNatal2017 + '/' + yearNatal2017;

            var natal2018 = new Date("12/25/2018");
            var dateNatal2018 = natal2018.getDate();
            var monthNatal2018 = natal2018.getMonth() + 1;
            var yearNatal2018 = natal2018.getFullYear();
            var strNatal2018 = dateNatal2018 + '/' + monthNatal2018 + '/' + yearNatal2018;

            if (strReturnToWork == strTahunBaru) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strTahunBaru2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strTahunBaru2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulAdha) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulAdha2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulAdha2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strImlek) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strImlek2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strImlek2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNyepi) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNyepi2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNyepi2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWafatIsaAlMasih) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWafatIsaAlMasih2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWafatIsaAlMasih2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHariBuruh) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHariBuruh2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHariBuruh2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strKenaikanYesus) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strKenaikanYesus2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strKenaikanYesus2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIsraMiraj) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIsraMiraj2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIsraMiraj2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWaisak) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWaisak2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strWaisak2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulFitri1) {
                numberPublicHolidays = numberPublicHolidays + 2;

            }
            if (strReturnToWork == strIdulFitri12017) {
                numberPublicHolidays = numberPublicHolidays + 2;
            }
            if (strReturnToWork == strIdulFitri12018) {
                numberPublicHolidays = numberPublicHolidays + 2;
            }
            if (strReturnToWork == strIdulFitri2) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulFitri22017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strIdulFitri22018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHUTRI) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHUTRI2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strHUTRI2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strTahunBaruIslam) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strTahunBaruIslam2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strTahunBaruIslam2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strMaulidNabi) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strMaulidNabi2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strMaulidNabi2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNatal) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNatal2017) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }
            if (strReturnToWork == strNatal2018) {
                numberPublicHolidays = numberPublicHolidays + 1;
            }

            return numberPublicHolidays;
        }

        function checkWeekend(dayReturnToWork)
        {
            var dayReturnToWorkInNumber = dayReturnToWork;

            var weekday = new Array(7);
            weekday[0] = "Sunday";
            weekday[1] = "Monday";
            weekday[2] = "Tuesday";
            weekday[3] = "Wednesday";
            weekday[4] = "Thursday";
            weekday[5] = "Friday";
            weekday[6] = "Saturday";

            var weekdayName = weekday[dayReturnToWorkInNumber];

            return weekdayName;
        }

        function displayRequestDetail(domID, dayOffRequestDayOffType, dayOffRequestStarDate, dayOffRequestEndDate, dayOffRequestFullOrHalf, dayOffRequestRemarks, dayOffRewquestTotalDays, returnToWork)
        {
            console.log("dayOffRewquestTotalDays: " + dayOffRewquestTotalDays)

            var url = "/HRDayOff/DisplayRequestDetail/?dayOffRequestDayOffType=" + dayOffRequestDayOffType + "&dayOffRequestStarDate=" + dayOffRequestStarDate + "&dayOffRequestEndDate=" + dayOffRequestEndDate + "&dayOffRequestFullOrHalf=" + dayOffRequestFullOrHalf + "&dayOffRequestRemarks=" + dayOffRequestRemarks + "&dayOffRewquestTotalDays=" + dayOffRewquestTotalDays + "&returnToWork=" + returnToWork;
            $('#' + domID).load(url);

            console.log(url)
        }

        function testfungsi(domID, masterDayOffTypeValue)
        {
            var url = "/HRDayOff/TestAction/?masterDayOffTypeValue=" + masterDayOffTypeValue;
            $('#' + domID).load(url);
        }

        function checkThreeMonth(dateRequestStartDate, dateRequestEndDate)
        {
            var monthDateRequestStartDate = dateRequestStartDate.getMonth();
            var intMonthDateRequestStartDate = parseInt(monthDateRequestStartDate);

            var monthDateRequestEndDate = dateRequestEndDate.getMonth();
            
            var MonthInThreeMonth = intMonthDateRequestStartDate + parseInt(3);

            var setThreeMonthInMonth = new Date(dateRequestStartDate.setMonth(MonthInThreeMonth));
            var setThreeMonthInDate = new Date(dateRequestStartDate.setDate(setThreeMonthInMonth.getDate() - 1));

            var strInThreeMonth = (setThreeMonthInDate.getMonth() + 1) + '/' + setThreeMonthInDate.getDate() + '/' + setThreeMonthInDate.getFullYear();

            return setThreeMonthInDate;
        }

        function checkOneAndHalfMonth(dateRequestStartDate, dateRequestEndDate)
        {
            var monthDateRequestStartDate = dateRequestStartDate.getMonth();
            var intMonthDateRequestStartDate = parseInt(monthDateRequestStartDate);

            var MonthInOneMonth = intMonthDateRequestStartDate + parseInt(1);

            var setMonthInOneMonth = new Date(dateRequestStartDate.setMonth(MonthInOneMonth));
            var setDateInOneMonth = new Date(dateRequestStartDate.setDate(setMonthInOneMonth.getDate() - 1));

            var strInOneMonth = (setDateInOneMonth.getMonth() + 1) + '/' + setDateInOneMonth.getDate() + '/' + setDateInOneMonth.getFullYear();

            var dateSetDateInOneMonth = new Date(setDateInOneMonth.setDate(setDateInOneMonth.getDate() + 15));

            return dateSetDateInOneMonth;
        }

        function checkPublicHolidays(dateStartRequestDate, dateEndRequestDate)
        {
            var numberPublicHolidays = 0;
            var year2016 = "2016";
            var year2017 = "2017";
            var year2018 = "2018";

            for (var d = dateStartRequestDate; d <= dateEndRequestDate; d.setDate(d.getDate() + 1)) {
                var checkDate = new Date(d);
                var dateCheckDate = checkDate.getDate();
                var monthCheckDate = checkDate.getMonth() + 1;
                var yearCheckDate = checkDate.getFullYear();
                var strCheckDate = dateCheckDate + '/' + monthCheckDate + '/' + yearCheckDate;

                var tahunBaru = new Date("01/01/2016");
                var dateTahunBaru = tahunBaru.getDate();
                var monthTahunBaru = tahunBaru.getMonth() + 1;
                var yearTahunBaru = tahunBaru.getFullYear();
                var strTahunBaru = dateTahunBaru + '/' + monthTahunBaru + '/' + yearTahunBaru;

                var tahunBaru2017 = new Date("01/01/2017");
                var dateTahunBaru2017 = tahunBaru2017.getDate();
                var monthTahunBaru2017 = tahunBaru2017.getMonth() + 1;
                var yearTahunBaru2017 = tahunBaru2017.getFullYear();
                var strTahunBaru2017 = dateTahunBaru2017 + '/' + monthTahunBaru2017 + '/' + yearTahunBaru2017;

                var tahunBaru2018 = new Date("01/01/2018");
                var dateTahunBaru2018 = tahunBaru2018.getDate();
                var monthTahunBaru2018 = tahunBaru2018.getMonth() + 1;
                var yearTahunBaru2018 = tahunBaru2018.getFullYear();
                var strTahunBaru2018 = dateTahunBaru2018 + '/' + monthTahunBaru2018 + '/' + yearTahunBaru2018;

                var imlek = new Date("02/08/2016");
                var dateImlek = imlek.getDate();
                var monthImlek = imlek.getMonth() + 1;
                var yearImlek = imlek.getFullYear();
                var strImlek = dateImlek + '/' + monthImlek + '/' + yearImlek;

                var imlek2017 = new Date("01/28/2017");
                var dateImlek2017 = imlek2017.getDate();
                var monthImlek2017 = imlek2017.getMonth() + 1;
                var yearImlek2017 = imlek2017.getFullYear();
                var strImlek2017 = dateImlek2017 + '/' + monthImlek2017 + '/' + yearImlek2017;

                var imlek2018 = new Date("02/16/2018");
                var dateImlek2018 = imlek2018.getDate();
                var monthImlek2018 = imlek2018.getMonth() + 1;
                var yearImlek2018 = imlek2018.getFullYear();
                var strImlek2018 = dateImlek2018 + '/' + monthImlek2018 + '/' + yearImlek2018;

                var idulAdha = new Date("09/12/2016");
                var dateIdulAdha = idulAdha.getDate();
                var monthIdulAdha = idulAdha.getMonth() + 1;
                var yearIdulAdha = idulAdha.getFullYear();
                var strIdulAdha = dateIdulAdha + '/' + monthIdulAdha + '/' + yearIdulAdha;

                var idulAdha2017 = new Date("09/01/2017");
                var dateIdulAdha2017 = idulAdha2017.getDate();
                var monthIdulAdha2017 = idulAdha2017.getMonth() + 1;
                var yearIdulAdha2017 = idulAdha2017.getFullYear();
                var strIdulAdha2017 = dateIdulAdha2017 + '/' + monthIdulAdha2017 + '/' + yearIdulAdha2017;

                var idulAdha2018 = new Date("08/22/2018");
                var dateIdulAdha2018 = idulAdha2018.getDate();
                var monthIdulAdha2018 = idulAdha2018.getMonth() + 1;
                var yearIdulAdha2018 = idulAdha2018.getFullYear();
                var strIdulAdha2018 = dateIdulAdha2018 + '/' + monthIdulAdha2018 + '/' + yearIdulAdha2018;

                var nyepi = new Date("03/09/2016");
                var dateNyepi = nyepi.getDate();
                var monthNyepi = nyepi.getMonth() + 1;
                var yearNyepi = nyepi.getFullYear();
                var strNyepi = dateNyepi + '/' + monthNyepi + '/' + yearNyepi;

                var nyepi2017 = new Date("03/28/2017");
                var dateNyepi2017 = nyepi2017.getDate();
                var monthNyepi2017 = nyepi2017.getMonth() + 1;
                var yearNyepi2017 = nyepi2017.getFullYear();
                var strNyepi2017 = dateNyepi2017 + '/' + monthNyepi2017 + '/' + yearNyepi2017;

                var nyepi2018 = new Date("03/18/2018");
                var dateNyepi2018 = nyepi2018.getDate();
                var monthNyepi2018 = nyepi2018.getMonth() + 1;
                var yearNyepi2018 = nyepi2018.getFullYear();
                var strNyepi2018 = dateNyepi2018 + '/' + monthNyepi2018 + '/' + yearNyepi2018;

                var wafatIsaAlMasih = new Date("03/25/2016");
                var dateWafatIsaAlMasih = wafatIsaAlMasih.getDate();
                var monthWafatIsaAlMasih = wafatIsaAlMasih.getMonth() + 1;
                var yearWafatIsaAlMasih = wafatIsaAlMasih.getFullYear();
                var strWafatIsaAlMasih = dateWafatIsaAlMasih + '/' + monthWafatIsaAlMasih + '/' + yearWafatIsaAlMasih;

                var wafatIsaAlMasih2017 = new Date("04/14/2017");
                var dateWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getDate();
                var monthWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getMonth() + 1;
                var yearWafatIsaAlMasih2017 = wafatIsaAlMasih2017.getFullYear();
                var strWafatIsaAlMasih2017 = dateWafatIsaAlMasih2017 + '/' + monthWafatIsaAlMasih2017 + '/' + yearWafatIsaAlMasih2017;

                var wafatIsaAlMasih2018 = new Date("03/30/2018");
                var dateWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getDate();
                var monthWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getMonth() + 1;
                var yearWafatIsaAlMasih2018 = wafatIsaAlMasih2018.getFullYear();
                var strWafatIsaAlMasih2018 = dateWafatIsaAlMasih2018 + '/' + monthWafatIsaAlMasih2018 + '/' + yearWafatIsaAlMasih2018;

                var hariBuruh = new Date("05/01/2016");
                var dateHariBuruh = hariBuruh.getDate();
                var monthHariBuruh = hariBuruh.getMonth() + 1;
                var yearHariBuruh = hariBuruh.getFullYear();
                var strHariBuruh = dateHariBuruh + '/' + monthHariBuruh + '/' + yearHariBuruh;

                var hariBuruh2017 = new Date("05/01/2017");
                var dateHariBuruh2017 = hariBuruh2017.getDate();
                var monthHariBuruh2017 = hariBuruh2017.getMonth() + 1;
                var yearHariBuruh2017 = hariBuruh2017.getFullYear();
                var strHariBuruh2017 = dateHariBuruh2017 + '/' + monthHariBuruh2017 + '/' + yearHariBuruh2017;

                var hariBuruh2018 = new Date("05/01/2018");
                var dateHariBuruh2018 = hariBuruh2018.getDate();
                var monthHariBuruh2018 = hariBuruh2018.getMonth() + 1;
                var yearHariBuruh2018 = hariBuruh2018.getFullYear();
                var strHariBuruh2018 = dateHariBuruh2018 + '/' + monthHariBuruh2018 + '/' + yearHariBuruh2018;

                var kenaikanYesus = new Date("05/05/2016");
                var dateKenaikanYesus = kenaikanYesus.getDate();
                var monthKenaikanYesus = kenaikanYesus.getMonth() + 1;
                var yearKenaikanYesus = kenaikanYesus.getFullYear();
                var strKenaikanYesus = dateKenaikanYesus + '/' + monthKenaikanYesus + '/' + yearKenaikanYesus;

                var kenaikanYesus2017 = new Date("05/25/2017");
                var dateKenaikanYesus2017 = kenaikanYesus2017.getDate();
                var monthKenaikanYesus2017 = kenaikanYesus2017.getMonth() + 1;
                var yearKenaikanYesus2017 = kenaikanYesus2017.getFullYear();
                var strKenaikanYesus2017 = dateKenaikanYesus2017 + '/' + monthKenaikanYesus2017 + '/' + yearKenaikanYesus2017;

                var kenaikanYesus2018 = new Date("05/10/2018");
                var dateKenaikanYesus2018 = kenaikanYesus2018.getDate();
                var monthKenaikanYesus2018 = kenaikanYesus2018.getMonth() + 1;
                var yearKenaikanYesus2018 = kenaikanYesus2018.getFullYear();
                var strKenaikanYesus2018 = dateKenaikanYesus2018 + '/' + monthKenaikanYesus2018 + '/' + yearKenaikanYesus2018;

                var israMiraj = new Date("05/06/2016");
                var dateIsraMiraj = israMiraj.getDate();
                var monthIsraMiraj = israMiraj.getMonth() + 1;
                var yearIsraMiraj = israMiraj.getFullYear();
                var strIsraMiraj = dateIsraMiraj + '/' + monthIsraMiraj + '/' + yearIsraMiraj;

                var israMiraj2017 = new Date("04/24/2017");
                var dateIsraMiraj2017 = israMiraj2017.getDate();
                var monthIsraMiraj2017 = israMiraj2017.getMonth() + 1;
                var yearIsraMiraj2017 = israMiraj2017.getFullYear();
                var strIsraMiraj2017 = dateIsraMiraj2017 + '/' + monthIsraMiraj2017 + '/' + yearIsraMiraj2017;

                var israMiraj2018 = new Date("04/13/2018");
                var dateIsraMiraj2018 = israMiraj2018.getDate();
                var monthIsraMiraj2018 = israMiraj2018.getMonth() + 1;
                var yearIsraMiraj2018 = israMiraj2018.getFullYear();
                var strIsraMiraj2018 = dateIsraMiraj2018 + '/' + monthIsraMiraj2018 + '/' + yearIsraMiraj2018;

                var waisak = new Date("05/22/2016");
                var dateWaisak = waisak.getDate();
                var monthWaisak = waisak.getMonth() + 1;
                var yearWaisak = waisak.getFullYear();
                var strWaisak = dateWaisak + '/' + monthWaisak + '/' + yearWaisak;

                var waisak2017 = new Date("05/11/2017");
                var dateWaisak2017 = waisak2017.getDate();
                var monthWaisak2017 = waisak2017.getMonth() + 1;
                var yearWaisak2017 = waisak2017.getFullYear();
                var strWaisak2017 = dateWaisak2017 + '/' + monthWaisak2017 + '/' + yearWaisak2017;

                var waisak2018 = new Date("05/29/2018");
                var dateWaisak2018 = waisak2018.getDate();
                var monthWaisak2018 = waisak2018.getMonth() + 1;
                var yearWaisak2018 = waisak2018.getFullYear();
                var strWaisak2018 = dateWaisak2018 + '/' + monthWaisak2018 + '/' + yearWaisak2018;

                var idulFitri1 = new Date("07/06/2016");
                var dateIdulFitri1 = idulFitri1.getDate();
                var monthIdulFitri1 = idulFitri1.getMonth() + 1;
                var yearIdulFitri1 = idulFitri1.getFullYear();
                var strIdulFitri1 = dateIdulFitri1 + '/' + monthIdulFitri1 + '/' + yearIdulFitri1;

                var idulFitri12017 = new Date("06/25/2017");
                var dateIdulFitri12017 = idulFitri12017.getDate();
                var monthIdulFitri12017 = idulFitri12017.getMonth() + 1;
                var yearIdulFitri12017 = idulFitri12017.getFullYear();
                var strIdulFitri12017 = dateIdulFitri12017 + '/' + monthIdulFitri12017 + '/' + yearIdulFitri12017;

                var idulFitri12018 = new Date("06/15/2018");
                var dateIdulFitri12018 = idulFitri12018.getDate();
                var monthIdulFitri12018 = idulFitri12018.getMonth() + 1;
                var yearIdulFitri12018 = idulFitri12018.getFullYear();
                var strIdulFitri12018 = dateIdulFitri12018 + '/' + monthIdulFitri12018 + '/' + yearIdulFitri12018;

                var idulFitri2 = new Date("07/07/2016");
                var dateIdulFitri2 = idulFitri2.getDate();
                var monthIdulFitri2 = idulFitri2.getMonth() + 1;
                var yearIdulFitri2 = idulFitri2.getFullYear();
                var strIdulFitri2 = dateIdulFitri2 + '/' + monthIdulFitri2 + '/' + yearIdulFitri2;

                var idulFitri22017 = new Date("06/26/2017");
                var dateIdulFitri22017 = idulFitri22017.getDate();
                var monthIdulFitri22017 = idulFitri22017.getMonth() + 1;
                var yearIdulFitri22017 = idulFitri22017.getFullYear();
                var strIdulFitri22017 = dateIdulFitri22017 + '/' + monthIdulFitri22017 + '/' + yearIdulFitri22017;

                var idulFitri22018 = new Date("06/16/2018");
                var dateIdulFitri22018 = idulFitri22018.getDate();
                var monthIdulFitri22018 = idulFitri22018.getMonth() + 1;
                var yearIdulFitri22018 = idulFitri22018.getFullYear();
                var strIdulFitri22018 = dateIdulFitri22018 + '/' + monthIdulFitri22018 + '/' + yearIdulFitri22018;

                var hutRI = new Date("08/17/2016");
                var dateHUTRI = hutRI.getDate();
                var monthHUTRI = hutRI.getMonth() + 1;
                var yearHUTRI = hutRI.getFullYear();
                var strHUTRI = dateHUTRI + '/' + monthHUTRI + '/' + yearHUTRI;

                var hutRI2017 = new Date("08/17/2017");
                var dateHUTRI2017 = hutRI2017.getDate();
                var monthHUTRI2017 = hutRI2017.getMonth() + 1;
                var yearHUTRI2017 = hutRI2017.getFullYear();
                var strHUTRI2017 = dateHUTRI2017 + '/' + monthHUTRI2017 + '/' + yearHUTRI2017;

                var hutRI2018 = new Date("08/17/2018");
                var dateHUTRI2018 = hutRI2018.getDate();
                var monthHUTRI2018 = hutRI2018.getMonth() + 1;
                var yearHUTRI2018 = hutRI2018.getFullYear();
                var strHUTRI2018 = dateHUTRI2018 + '/' + monthHUTRI2018 + '/' + yearHUTRI2018;

                var tahunBaruIslam = new Date("10/02/2016");
                var dateTahunBaruIslam = tahunBaruIslam.getDate();
                var monthTahunBaruIslam = tahunBaruIslam.getMonth() + 1;
                var yearTahunBaruIslam = tahunBaruIslam.getFullYear();
                var strTahunBaruIslam = dateTahunBaruIslam + '/' + monthTahunBaruIslam + '/' + yearTahunBaruIslam;

                var tahunBaruIslam2017 = new Date("09/21/2017");
                var dateTahunBaruIslam2017 = tahunBaruIslam2017.getDate();
                var monthTahunBaruIslam2017 = tahunBaruIslam2017.getMonth() + 1;
                var yearTahunBaruIslam2017 = tahunBaruIslam2017.getFullYear();
                var strTahunBaruIslam2017 = dateTahunBaruIslam2017 + '/' + monthTahunBaruIslam2017 + '/' + yearTahunBaruIslam2017;

                var tahunBaruIslam2018 = new Date("09/12/2018");
                var dateTahunBaruIslam2018 = tahunBaruIslam2018.getDate();
                var monthTahunBaruIslam2018 = tahunBaruIslam2018.getMonth() + 1;
                var yearTahunBaruIslam2018 = tahunBaruIslam2018.getFullYear();
                var strTahunBaruIslam2018 = dateTahunBaruIslam2018 + '/' + monthTahunBaruIslam2018 + '/' + yearTahunBaruIslam2018;

                var maulidNabi = new Date("12/12/2016");
                var dateMaulidNabi = maulidNabi.getDate();
                var monthMaulidNabi = maulidNabi.getMonth() + 1;
                var yearMaulidNabi = maulidNabi.getFullYear();
                var strMaulidNabi = dateMaulidNabi + '/' + monthMaulidNabi + '/' + yearMaulidNabi;

                var maulidNabi2017 = new Date("12/01/2017");
                var dateMaulidNabi2017 = maulidNabi2017.getDate();
                var monthMaulidNabi2017 = maulidNabi2017.getMonth() + 1;
                var yearMaulidNabi2017 = maulidNabi2017.getFullYear();
                var strMaulidNabi2017 = dateMaulidNabi2017 + '/' + monthMaulidNabi2017 + '/' + yearMaulidNabi2017;

                var maulidNabi2018 = new Date("11/20/2018");
                var dateMaulidNabi2018 = maulidNabi2018.getDate();
                var monthMaulidNabi2018 = maulidNabi2018.getMonth() + 1;
                var yearMaulidNabi2018 = maulidNabi2018.getFullYear();
                var strMaulidNabi2018 = dateMaulidNabi2018 + '/' + monthMaulidNabi2018 + '/' + yearMaulidNabi;

                var natal = new Date("12/25/2016");
                var dateNatal = natal.getDate();
                var monthNatal = natal.getMonth() + 1;
                var yearNatal = natal.getFullYear();
                var strNatal = dateNatal + '/' + monthNatal + '/' + yearNatal;

                var natal2017 = new Date("12/25/2017");
                var dateNatal2017 = natal2017.getDate();
                var monthNatal2017 = natal2017.getMonth() + 1;
                var yearNatal2017 = natal2017.getFullYear();
                var strNatal2017 = dateNatal2017 + '/' + monthNatal2017 + '/' + yearNatal2017;

                var natal2018 = new Date("12/25/2018");
                var dateNatal2018 = natal2018.getDate();
                var monthNatal2018 = natal2018.getMonth() + 1;
                var yearNatal2018 = natal2018.getFullYear();
                var strNatal2018 = dateNatal2018 + '/' + monthNatal2018 + '/' + yearNatal2018;

                if (strCheckDate == strTahunBaru) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaru2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaru2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulAdha) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulAdha2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulAdha2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strImlek) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strImlek2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strImlek2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNyepi) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNyepi2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNyepi2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWafatIsaAlMasih) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWafatIsaAlMasih2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWafatIsaAlMasih2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHariBuruh) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHariBuruh2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHariBuruh2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strKenaikanYesus) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strKenaikanYesus2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strKenaikanYesus2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIsraMiraj) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIsraMiraj2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIsraMiraj2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWaisak) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWaisak2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWaisak2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri1) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri12017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri12018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri2) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri22017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri22018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHUTRI) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHUTRI2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHUTRI2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaruIslam) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaruIslam2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaruIslam2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strMaulidNabi) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strMaulidNabi2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strMaulidNabi2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNatal) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNatal2017) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNatal2018) {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }

            }
            
            return numberPublicHolidays;
        }

        function calcBusinessDays(dDate1, dDate2) { // input given as Date objects
            var iWeeks, iDateDiff, iAdjust = 0;
            if (dDate2 < dDate1) return -1; // error code if dates transposed
            var iWeekday1 = dDate1.getDay(); // day of week
            var iWeekday2 = dDate2.getDay();
            iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1; // change Sunday from 0 to 7
            iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;
            if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1; // adjustment if both days on weekend
            iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1; // only count weekdays
            iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;

            // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)
            iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)

            if (iWeekday1 <= iWeekday2) {
                iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)
            } else {
                iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)
            }

            iDateDiff -= iAdjust // take into account both days on weekend

            return (iDateDiff + 1); // add 1 because dates are inclusive
        }

        function onSuccess(data)
        {
            window.location.href = data.urlToRedirect;
        }

        function onFailure(data)
        {
            window.location.href = data.urlToRedirect;
        }

        //function OnSelectAssetHolderFrom(e) {
        //    var dataItem = this.dataItem(e.item);
        //    var url = "/HRDataMaster/GetProfessional/" + dataItem.ID;


        //    $.getJSON(url, function (result) {

        //        $('#FullName').prop('value', result[0].Name);
        //        $('#ProjectUnit').prop('value', result[0].Project_Unit);
        //        $('#Position').prop('value', result[0].Position);
        //        $('#PSANumber').prop('value', result[0].PSANumber);
        //        $('#JoinDate').prop('value', result[0].JoinDate);
        //        $('#JoinDate').prop('value', result[0].JoinDateTemp);
        //        $('#RequestorMailAddress').prop('value', result[0].OfficeEmail);
        //        $('#ProfessionalID').prop('value', result[0].ID);

        //    })d

        //}


    </script>
}
