@using MCAWebAndAPI.Model.ViewModel.Form.HR

@model DayOffRequestVM

@{
    ViewBag.Title = "Form Create Day-Off Request";
}

@using (Ajax.BeginForm("CreateDayOffRequestData", "HRDayOff",
                                                                                                    FormMethod.Post,
                                                                                                    new AjaxOptions
                                                                                                    {
                                                                                                        OnBegin = "onBeginForm",
                                                                                                        OnComplete = "onCompleteForm",
                                                                                                        OnSuccess = "onSuccessFormEmbed",
                                                                                                        OnFailure = "onFailureForm"
                                                                                                    }, new { @class = "form-horizontal" }))
{
    <fieldset>
        <legend>Day-Off Request Header Data</legend>
        <div class="row">
            @Html.Partial("_DayOffRequestHeaderData", Model)
        </div>

        <legend>Current Day-Off Balance</legend>
    <div class="row">
        @Html.Partial("_DayOffCurrentBalance", Model.DayOffBalanceDetails)
    </div>

        <legend>Request for Day-Off</legend>
        <div class="row">
            @Html.Partial("_RequestForDayOff", Model.DayOffRequestDetails)
        </div>

        <div class="col-md-12">
            <button id="apply-button" class="btn btn-primary" type="button" onclick="validateDayOffRequest()">
                <i class="fa fa-save"></i>
                Apply
            </button>
        </div>

        <legend>Day-Off Request Display</legend>
        <div id="request-detail-display" class="row">
            
        </div>

        <legend>Day-Off Next Balance</legend>
        <div class="row">
            @Html.Partial("_DayOffNextBalance", Model.DayOffNextBalance)
        </div>
    </fieldset>

}

<div class="form-actions">
    <div class="row">
        <div class="col-md-12">
            <button id="submit-for-approval" class="btn btn-primary" type="button">
                <i class="fa fa-save"></i>
                Submit for Approval
            </button>
            <button id="submit-draft-button" class="btn btn-primary" type="button">
                <i class="fa fa-save"></i>
                Save as Draft
            </button>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#submit-for-approval").click(function () {
                $("#StatusForm").val("Pending Approval");
                $("form").submit();
            });
        });

        $(document).ready(function () {
            $("#submit-draft-button").click(function () {
                $("#StatusForm").val("Draft");
                $("form").submit();
            });
        });

        function validateDayOffRequest()
        {
            var lastWorkingDate = $("#LastWorkingDate").val();
            var dateTimeLastWorkingDate = new Date(lastWorkingDate);
            var balanceAnnualDayOff;
            var balanceSpecialDayOff;
            var balancePaternity;
            var balanceCompensatoryTime;
            var balanceMarriageOfProfessional;
            var balanceMarriageOfProfessionalChildren;
            var balanceCircumcisionOfProfessionalSon;
            var balanceBaptismOfProfessionalChildren;
            var balanceDeathOfProfessionalDependent;
            var balanceDeathOfProfessionalHousehold;
            var balanceProfessionalSeparationDate;
            var balanceMaternity;

            var dayOffRequestDayOffType = [];
            var dayOffRequestStarDate = [];
            var dayOffRequestEndDate = [];
            var dayOffRequestFullOrHalf = [];
            var dayOffRequestRemarks = [];
            var dayOffRewquestTotalDays = [];

            var rowgridBalanceDetail = $("#DayOffBalanceDetails").data("kendoGrid").tbody.find("tr");
            var j = 0;

            rowgridBalanceDetail.each(function (e) {
                var dayOffType = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text;

                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Annual Day-Off")
                {
                    balanceAnnualDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Special Day-Off")
                {
                    balanceSpecialDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Paternity")
                {
                    balancePaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional")
                {
                    balanceMarriageOfProfessional = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional's Children")
                {
                    balanceMarriageOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Circumcision of the Professional's Sons")
                {
                    balanceCircumcisionOfProfessionalSon = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Baptism of the Professional's Children")
                {
                    balanceBaptismOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws")
                {
                    balanceDeathOfProfessionalDependent = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of a member of the Professional’s household other than the Professional’s dependent or parent")
                {
                    balanceDeathOfProfessionalHousehold = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Professional’s separation date is on or after 19 of the month")
                {
                    balanceProfessionalSeparationDate = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Compensatory Time")
                {
                    balanceCompensatoryTime = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Maternity")
                {
                    balanceMaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                
                j++;
            });

            var rowgrid = $("#DayOffRequestDetails").data("kendoGrid").tbody.find("tr");
            var i = 0;
            var totalRequestAnnualDayOff = 0;
            var totalRequestSpecialDayOff = 0;
            var totalRequestPaternity = 0;
            var totalRequestMarriageOfProfessional = 0;
            var totalRequestCircumcisionOfProfessionalSon = 0;
            var totalRequestMarriageOfTheProfessionalChildren = 0;
            var totalRequestBaptismOfTheProfessionalChildren = 0;
            var totalRequestDeathOfProfessionalDependent = 0;
            var totalRequestDeathOfProfessionalHousehold = 0;
            var totalRequestProfessionalSeparationDate = 0;
            var totalRequestCompensatoryTime = 0;
            var totalRequestAnotherDayOffTypeDate = 0;

            rowgrid.each(function (e) {

                var startRequestDate = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].RequestStartDate;
                var dateStartRequestDate = startRequestDate.getDate();
                var monthStartRequestDate = startRequestDate.getMonth() + 1;
                var yearStartRequestDate = startRequestDate.getFullYear();
                var strStartRequestDate = monthStartRequestDate + '/' + dateStartRequestDate + '/' + yearStartRequestDate;

                var endRequestDate = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].RequestEndDate;
                var dateEndRequestDate = endRequestDate.getDate();
                var monthEndRequestDate = endRequestDate.getMonth() + 1;
                var yearEndRequestDate = endRequestDate.getFullYear();
                var strEndRequestDate = monthEndRequestDate + '/' + dateEndRequestDate + '/' + yearEndRequestDate;

                var masterDayOffTypeValue = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].MasterDayOffType.Value;

                if (masterDayOffTypeValue == "1")
                {
                    var textMasterDayOffTypeValue = "Annual Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "3")
                {
                    var textMasterDayOffTypeValue = "Sick Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "7")
                {
                    var textMasterDayOffTypeValue = "Special Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "24")
                {
                    var textMasterDayOffTypeValue = "Unpaid Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "24")
                {
                    var textMasterDayOffTypeValue = "Unpaid Day-Off";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "8")
                {
                    var textMasterDayOffTypeValue = "Compensatory Time";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "8")
                {
                    var textMasterDayOffTypeValue = "Compensatory Time";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "9")
                {
                    var textMasterDayOffTypeValue = "Maternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "11")
                {
                    var textMasterDayOffTypeValue = "Miscarriage";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "10")
                {
                    var textMasterDayOffTypeValue = "Paternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "10")
                {
                    var textMasterDayOffTypeValue = "Paternity";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "12")
                {
                    var textMasterDayOffTypeValue = "Marriage of the Professional";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "13")
                {
                    var textMasterDayOffTypeValue = "Marriage of the Professional's Children";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "14")
                {
                    var textMasterDayOffTypeValue = "Circumcision of the Professional's Sons";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "15")
                {
                    var textMasterDayOffTypeValue = "Baptism of the Professional's Children";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "16")
                {
                    var textMasterDayOffTypeValue = "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "17")
                {
                    var textMasterDayOffTypeValue = "Death of a member of the Professional’s household other than the Professional’s dependent or parent";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "18")
                {
                    var textMasterDayOffTypeValue = "Professional’s separation date is on or after 19 of the month";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "19")
                {
                    var textMasterDayOffTypeValue = "Unscheduled closing of MCA-Indonesia office(s)";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "20")
                {
                    var textMasterDayOffTypeValue = "Voting Day";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "21")
                {
                    var textMasterDayOffTypeValue = "Service as  a court witness";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }
                else if (masterDayOffTypeValue == "22")
                {
                    var textMasterDayOffTypeValue = "Other";
                    var woStrMasterDayOffType = textMasterDayOffTypeValue.replace(/\s/g, '');
                }


                var fullHalfDay = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].FullHalf.Text;
                var woStrFullHalfDay = fullHalfDay.replace(/\s/g, '');

                var remarks = $("#DayOffRequestDetails").data("kendoGrid").dataSource.data()[i].Remarks;
                var woStrRemarks = remarks.replace(/\s/g, '');

                var dateStartRequestDate = new Date(startRequestDate);
                var dateDateStartRequestDate = dateStartRequestDate.getDate();
                var monthDateStartRequestDate = dateStartRequestDate.getMonth() + 1;
                var yearDateStartRequestDate = dateStartRequestDate.getFullYear();
                var stringDateStartRequestDate = dateDateStartRequestDate + '/' + monthDateStartRequestDate + '/' + yearDateStartRequestDate;

                var dateEndRequestDate = new Date(endRequestDate);
                var dateDateEndRequestDate = dateEndRequestDate.getDate();
                var monthDateEndRequestDate = dateEndRequestDate.getMonth() + 1;
                var yearDateEndRequestDate = dateEndRequestDate.getFullYear();
                var stringDateEndRequestDate = dateDateEndRequestDate + '/' + monthDateEndRequestDate + '/' + yearDateEndRequestDate;

                if (dateStartRequestDate > dateEndRequestDate)
                {
                    alert("End Date must be more than Start Date");
                }
                else if (dateStartRequestDate < dateEndRequestDate)
                {
                    if (masterDayOffTypeValue == "9")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Maternity");
                        }
                        else if(fullHalfDay == "Full Day")
                        {
                            var setThreeMonthInDate = checkThreeMonth(dateStartRequestDate, dateEndRequestDate);

                            if(dateEndRequestDate > setThreeMonthInDate)
                            {
                                alert("Total Days Request is more than 3 Months");
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "11")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Miscarriage");
                        }
                        else if(fullHalfDay == "Full Day")
                        {
                            var dateSetDateInOneMonth = checkOneAndHalfMonth(dateStartRequestDate, dateEndRequestDate);

                            if (dateEndRequestDate > dateSetDateInOneMonth)
                            {
                                alert("Total Days Request is more than 1,5 Months");
                            }
                        }
                    }
                    else if (fullHalfDay == "Half Day")
                    {
                        alert("For Half Day, Start Date Must Be Same With End Date");
                    }
                    else if ((dateStartRequestDate > dateTimeLastWorkingDate) || (dateEndRequestDate > dateTimeLastWorkingDate))
                    {
                        alert("Your Start Request Date or End Request Date More Than Last Working Date");
                    }
                    else if (masterDayOffTypeValue == "1")
                    {
                        var requestAnnualDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);

                        var finalRequestAnnualDayOff = parseInt(requestAnnualDayOff) - parseInt(numberHolidays);

                        totalRequestAnnualDayOff = parseInt(totalRequestAnnualDayOff) + parseInt(finalRequestAnnualDayOff);

                        var intBalanceAnnualDayOff = parseInt(balanceAnnualDayOff);

                        if (totalRequestAnnualDayOff > intBalanceAnnualDayOff)
                        {
                            alert("Total Days Request is more than Total Annual Day-Off Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);

                            console.log("finalRequestAnnualDayOff: " + finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "7")
                    {
                        
                        var requestSpecialDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestSpecialDayOff = parseInt(requestSpecialDayOff) - parseInt(numberHolidays);

                        totalRequestSpecialDayOff = parseInt(totalRequestSpecialDayOff) + parseInt(finalRequestSpecialDayOff);

                        var intBalanceSpecialDayOff = parseInt(balanceSpecialDayOff);

                        if (totalRequestSpecialDayOff > intBalanceSpecialDayOff)
                        {
                            alert("Total Days Request is more than Total Special Day-Off Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }

                    }
                    else if (masterDayOffTypeValue == "8")
                    {
                        var requestCompensatoryTime = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);

                        var finalRequestCompensatoryTime = parseInt(requestCompensatoryTime) - parseInt(numberHolidays);

                        totalRequestCompensatoryTime = parseInt(totalRequestCompensatoryTime) + parseInt(finalRequestCompensatoryTime);

                        var intBalanceCompensatoryTime = parseInt(balanceCompensatoryTime);

                        if (totalRequestCompensatoryTime > intBalanceCompensatoryTime)
                        {
                            alert("Total Days Request is more than Total Compensatory Time Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "10")
                    {
                        var requestPaternity = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestPaternity = parseInt(requestPaternity) - parseInt(numberHolidays);

                        totalRequestPaternity = parseInt(totalRequestPaternity) + parseInt(finalRequestPaternity);

                        var intBalancePaternity = parseInt(balancePaternity);

                        if (totalRequestPaternity > intBalancePaternity)
                        {
                            alert("Total Days Request is more than Total Paternity Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "12")
                    {
                        var requestMarriageOfProfessional = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessional = parseInt(requestMarriageOfProfessional) - parseInt(numberHolidays);

                        totalRequestMarriageOfProfessional = parseInt(totalRequestMarriageOfProfessional) + parseInt(finalRequestMarriageOfProfessional);

                        var intBalanceMarriageOfProfessional = parseInt(balanceMarriageOfProfessional);

                        if (totalRequestMarriageOfProfessional > intBalanceMarriageOfProfessional)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "13")
                    {
                        var requestMarriageOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessionalChildren = parseInt(requestMarriageOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestMarriageOfTheProfessionalChildren = parseInt(totalRequestMarriageOfTheProfessionalChildren) + parseInt(finalRequestMarriageOfProfessionalChildren);

                        var intBalanceMarriageOfProfessionalChildren = parseInt(balanceMarriageOfProfessionalChildren);

                        if (totalRequestMarriageOfTheProfessionalChildren > intBalanceMarriageOfProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional's Children Current Balance");
                        }
                        else
                        {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "14")
                    {
                        var requestCircumcisionOfProfessionalSon = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCircumcisionOfProfessionalSon = parseInt(requestCircumcisionOfProfessionalSon) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestCircumcisionOfProfessionalSon);

                        var intBalanceBaptismOfProfessionalChildren = parseInt(balanceCircumcisionOfProfessionalSon);

                        if (totalRequestCircumcisionOfProfessionalSon > intBalanceCircumcisionOfProfessionalSon) {
                            alert("Total Days Request is more than Total Circumcision of Professional's Son Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "15")
                    {
                        var requestBaptismOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestBaptismOfProfessionalChildren = parseInt(requestBaptismOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestBaptismOfProfessionalChildren);

                        var intBalanceBaptismOfTheProfessionalChildren = parseInt(balanceBaptismOfProfessionalChildren);

                        if (totalRequestBaptismOfTheProfessionalChildren > intBalanceBaptismOfTheProfessionalChildren) {
                            alert("Total Days Request is more than Total Baptism of The Professional's Children Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "16")
                    {
                        var requestDeathOfProfessionalDependent = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalDependent = parseInt(requestDeathOfProfessionalDependent) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalDependent = parseInt(totalRequestDeathOfProfessionalDependent) + parseInt(finalRequestDeathOfProfessionalDependent);

                        var intBalanceDeathOfProfessionalDependent = parseInt(balanceDeathOfProfessionalDependent);

                        if (totalRequestDeathOfProfessionalDependent > intBalanceDeathOfProfessionalDependent)
                        {
                            alert("Total Days Request is more than Total Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "17")
                    {
                        var requestDeathOfProfessionalHousehold = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalHousehold = parseInt(requestDeathOfProfessionalHousehold) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalHousehold = parseInt(totalRequestDeathOfProfessionalHousehold) + parseInt(finalRequestDeathOfProfessionalHousehold);

                        var intBalanceDeatOfProfessionalHousehold = parseInt(balanceDeathOfProfessionalHousehold);

                        if (totalRequestDeathOfProfessionalHousehold > intBalanceDeatOfProfessionalHousehold)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s household other than the Professional’s dependent or parent Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else if (masterDayOffTypeValue == "18")
                    {
                        var requestProfessionalSeparationDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestProfessionalSeparationDate = parseInt(requestProfessionalSeparationDate) - parseInt(numberHolidays);

                        totalRequestProfessionalSeparationDate = parseInt(totalRequestProfessionalSeparationDate) + parseInt(finalRequestProfessionalSeparationDate);

                        var intBalanceProfessionalSeparationDate = parseInt(balanceProfessionalSeparationDate);

                        if (totalRequestProfessionalSeparationDate > intBalanceProfessionalSeparationDate)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s separation date is on or after 19 of the month Current Balance");
                        }
                        else {
                            dayOffRequestDayOffType.push(woStrMasterDayOffType);
                            dayOffRequestStarDate.push(strStartRequestDate);
                            dayOffRequestEndDate.push(strEndRequestDate);
                            dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                            dayOffRequestRemarks.push(woStrRemarks);
                            dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                        }
                    }
                    else
                    {
                        var requestAnotherDayOffTypeDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestAnotherDayOffTypeDate = parseInt(requestAnotherDayOffTypeDate) - parseInt(numberHolidays);

                        totalRequestAnotherDayOffTypeDate = parseInt(totalRequestAnotherDayOffTypeDate) + parseInt(finalRequestAnotherDayOffTypeDate);

                        dayOffRequestDayOffType.push(woStrMasterDayOffType);
                        dayOffRequestStarDate.push(strStartRequestDate);
                        dayOffRequestEndDate.push(strEndRequestDate);
                        dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                        dayOffRequestRemarks.push(woStrRemarks);
                        dayOffRewquestTotalDays.push(finalRequestAnotherDayOffTypeDate);
                    }
                }
                else
                {
                    if (masterDayOffTypeValue == "9")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Maternity");
                        }
                    }
                    else if (masterDayOffTypeValue == "11")
                    {
                        if (fullHalfDay == "Half Day")
                        {
                            alert("Must Input Full Day for Miscarriage");
                        }
                    }
                    else if ((dateStartRequestDate > dateTimeLastWorkingDate) || (dateEndRequestDate > dateTimeLastWorkingDate))
                    {
                        alert("Your Start Request Date or End Request Date More Than Last Working Date");
                    }
                    else if (masterDayOffTypeValue == "1")
                    {
                        var requestAnnualDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestAnnualDayOff = parseInt(requestAnnualDayOff) - parseInt(numberHolidays);

                        totalRequestAnnualDayOff = parseInt(totalRequestAnnualDayOff) + parseInt(finalRequestAnnualDayOff);

                        var intBalanceAnnualDayOff = parseInt(balanceAnnualDayOff);

                        if (totalRequestAnnualDayOff > intBalanceAnnualDayOff)
                        {
                            alert("Total Days Request is more than Total Annual Day-Off Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day")
                            {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else
                            {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "7")
                    {
                        var requestSpecialDayOff = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestSpecialDayOff = parseInt(requestSpecialDayOff) - parseInt(numberHolidays);

                        totalRequestSpecialDayOff = parseInt(totalRequestSpecialDayOff) + parseInt(finalRequestSpecialDayOff);

                        var intBalanceSpecialDayOff = parseInt(balanceSpecialDayOff);

                        if (totalRequestSpecialDayOff > intBalanceSpecialDayOff)
                        {
                            alert("Total Days Request is more than Total Special Day-Off Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "8")
                    {
                        var requestCompensatoryTime = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCompensatoryTime = parseInt(requestCompensatoryTime) - parseInt(numberHolidays);

                        totalRequestCompensatoryTime = parseInt(totalRequestCompensatoryTime) + parseInt(finalRequestCompensatoryTime);

                        var intBalanceCompensatoryTime = parseInt(balanceCompensatoryTime);

                        if (totalRequestCompensatoryTime > intBalanceCompensatoryTime) {
                            alert("Total Days Request is more than Total Compensatory Time Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "10")
                    {
                        var requestPaternity = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestPaternity = parseInt(requestPaternity) - parseInt(numberHolidays);

                        totalRequestPaternity = parseInt(totalRequestPaternity) + parseInt(finalRequestPaternity);

                        var intBalancePaternity = parseInt(balancePaternity);

                        if (totalRequestPaternity > intBalancePaternity)
                        {
                            alert("Total Days Request is more than Total Paternity Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "12")
                    {
                        var requestMarriageOfProfessional = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessional = parseInt(requestMarriageOfProfessional) - parseInt(numberHolidays);

                        totalRequestMarriageOfProfessional = parseInt(totalRequestMarriageOfProfessional) + parseInt(finalRequestMarriageOfProfessional);

                        var intBalanceMarriageOfProfessional = parseInt(balanceMarriageOfProfessional);

                        if (totalRequestMarriageOfProfessional > intBalanceMarriageOfProfessional)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "13")
                    {
                        var requestMarriageOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestMarriageOfProfessionalChildren = parseInt(requestMarriageOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestMarriageOfTheProfessionalChildren = parseInt(totalRequestMarriageOfTheProfessionalChildren) + parseInt(finalRequestMarriageOfProfessionalChildren);

                        var intBalanceMarriageOfProfessionalChildren = parseInt(balanceMarriageOfProfessionalChildren);

                        if (totalRequestMarriageOfTheProfessionalChildren > intBalanceMarriageOfProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Marriage of The Professional's Children Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "14")
                    {
                        var requestCircumcisionOfProfessionalSon = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestCircumcisionOfProfessionalSon = parseInt(requestCircumcisionOfProfessionalSon) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestCircumcisionOfProfessionalSon);

                        var intBalanceBaptismOfProfessionalChildren = parseInt(balanceCircumcisionOfProfessionalSon);

                        if (totalRequestCircumcisionOfProfessionalSon > intBalanceCircumcisionOfProfessionalSon)
                        {
                            alert("Total Days Request is more than Total Circumcision of Professional's Son Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "15")
                    {
                        var requestBaptismOfProfessionalChildren = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestBaptismOfProfessionalChildren = parseInt(requestBaptismOfProfessionalChildren) - parseInt(numberHolidays);

                        totalRequestBaptismOfTheProfessionalChildren = parseInt(totalRequestBaptismOfTheProfessionalChildren) + parseInt(finalRequestBaptismOfProfessionalChildren);

                        var intBalanceBaptismOfTheProfessionalChildren = parseInt(balanceBaptismOfProfessionalChildren);

                        if (totalRequestBaptismOfTheProfessionalChildren > intBalanceBaptismOfTheProfessionalChildren)
                        {
                            alert("Total Days Request is more than Total Baptism of The Professional's Children Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "16")
                    {
                        var requestDeathOfProfessionalDependent = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalDependent = parseInt(requestDeathOfProfessionalDependent) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalDependent = parseInt(totalRequestDeathOfProfessionalDependent) + parseInt(finalRequestDeathOfProfessionalDependent);

                        var intBalanceDeathOfProfessionalDependent = parseInt(balanceDeathOfProfessionalDependent);

                        if (totalRequestDeathOfProfessionalDependent > intBalanceDeathOfProfessionalDependent)
                        {
                            alert("Total Days Request is more than Total Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "17")
                    {
                        var requestDeathOfProfessionalHousehold = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestDeathOfProfessionalHousehold = parseInt(requestDeathOfProfessionalHousehold) - parseInt(numberHolidays);

                        totalRequestDeathOfProfessionalHousehold = parseInt(totalRequestDeathOfProfessionalHousehold) + parseInt(finalRequestDeathOfProfessionalHousehold);

                        var intBalanceDeatOfProfessionalHousehold = parseInt(balanceDeathOfProfessionalHousehold);

                        if (totalRequestDeathOfProfessionalHousehold > intBalanceDeatOfProfessionalHousehold)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s household other than the Professional’s dependent or parent Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                    else if (masterDayOffTypeValue == "18")
                    {
                        var requestProfessionalSeparationDate = calcBusinessDays(dateStartRequestDate, dateEndRequestDate);
                        var numberHolidays = checkPublicHolidays(dateStartRequestDate, dateEndRequestDate);
                        var finalRequestProfessionalSeparationDate = parseInt(requestProfessionalSeparationDate) - parseInt(numberHolidays);

                        totalRequestProfessionalSeparationDate = parseInt(totalRequestProfessionalSeparationDate) + parseInt(finalRequestProfessionalSeparationDate);

                        var intBalanceProfessionalSeparationDate = parseInt(balanceProfessionalSeparationDate);

                        if (totalRequestProfessionalSeparationDate > intBalanceProfessionalSeparationDate)
                        {
                            alert("Total Days Request is more than Death of a member of the Professional’s separation date is on or after 19 of the month Current Balance");
                        }
                        else
                        {
                            if (fullHalfDay == "Half Day") {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push("0.5");
                            }
                            else {
                                dayOffRequestDayOffType.push(woStrMasterDayOffType);
                                dayOffRequestStarDate.push(strStartRequestDate);
                                dayOffRequestEndDate.push(strEndRequestDate);
                                dayOffRequestFullOrHalf.push(woStrFullHalfDay);
                                dayOffRequestRemarks.push(woStrRemarks);
                                dayOffRewquestTotalDays.push(finalRequestAnnualDayOff);
                            }
                        }
                    }
                }

                i++;
            });

            if ((dayOffRequestDayOffType != null) && (dayOffRequestStarDate != null) && (dayOffRequestEndDate != null) && (dayOffRequestFullOrHalf != null) && (dayOffRequestRemarks != null))
            {
                var returnToWork = GetReturnToWork(dayOffRequestStarDate, dayOffRequestEndDate);

                displayRequestDetail("request-detail-display", dayOffRequestDayOffType, dayOffRequestStarDate, dayOffRequestEndDate, dayOffRequestFullOrHalf, dayOffRequestRemarks, dayOffRewquestTotalDays)
            }
        
        }

        function GetReturnToWork(dayOffRequestStarDate, dayOffRequestEndDate)
        {
            var lenStartDate = dayOffRequestStarDate.length;
            var lenEndDate = dayOffRequestEndDate.length;
            
            for (var i = 0; i < lenEndDate; i++)
            {
                for(var j = 0; j < lenStartDate; j++)
                {
                    var endDate = new Date(dayOffRequestEndDate[i]);
                    var returnToWork = new Date(setDate(endDate.getDate() + 1));
                    var dateReturnToWork = returnToWork.getDate();
                    var monthReturnToWork = returnToWork.getMonth() + 1;
                    var yearReturnToWork = returnToWork.getFullYear();
                    var strReturnToWork = monthReturnToWork + '/' + dateReturnToWork + '/' + yearReturnToWork;

                    console.log("returnToWork: " + returnToWork);
                    console.log("strReturnToWork: " + strReturnToWork);

                    var startDateNext = new Date(dayOffRequestStarDate[j + 1]);
                    var dateStartDateNext = startDateNext.getDate();
                    var monthStartDateNext = startDateNext.getMonth() + 1;
                    var yearStartDateNext = startDateNext.getFullYear();
                    var strStartDateNext = monthStartDateNext + '/' + dateStartDateNext + '/' + yearStartDateNext;
                    
                    console.log("startDateNext: " + startDateNext);
                    console.log("strStartDateNext: " + strStartDateNext);

                    if(strReturnToWork == strStartDateNext)
                    {
                        alert("strReturnToWork == strStartDateNext");
                    }
                    else
                    {
                        alert("strReturnToWork != strStartDateNext");
                    }
                    
                }
            }

            var rowgridRequestDetail = $("#DayOffRequestDetails").data("kendoGrid").tbody.find("tr");
            var j = 0;

            rowgridBalanceDetail.each(function (e) {
                var dayOffType = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text;

                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Annual Day-Off") {
                    balanceAnnualDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Special Day-Off") {
                    balanceSpecialDayOff = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Paternity") {
                    balancePaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional") {
                    balanceMarriageOfProfessional = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Marriage of the Professional's Children") {
                    balanceMarriageOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Circumcision of the Professional's Sons") {
                    balanceCircumcisionOfProfessionalSon = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Baptism of the Professional's Children") {
                    balanceBaptismOfProfessionalChildren = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of the Professional’s dependent (i.e. spouse or children) or parent or parent in-laws") {
                    balanceDeathOfProfessionalDependent = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Death of a member of the Professional’s household other than the Professional’s dependent or parent") {
                    balanceDeathOfProfessionalHousehold = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Professional’s separation date is on or after 19 of the month") {
                    balanceProfessionalSeparationDate = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Compensatory Time") {
                    balanceCompensatoryTime = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }
                if ($("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].DayOffType.Text == "Maternity") {
                    balanceMaternity = $("#DayOffBalanceDetails").data("kendoGrid").dataSource.data()[j].Balance;
                }

                j++;
            });
        }

        function displayRequestDetail(domID, dayOffRequestDayOffType, dayOffRequestStarDate, dayOffRequestEndDate, dayOffRequestFullOrHalf, dayOffRequestRemarks, dayOffRewquestTotalDays)
        {
            console.log("dayOffRewquestTotalDays: " + dayOffRewquestTotalDays)

            var url = "/HRDayOff/DisplayRequestDetail/?dayOffRequestDayOffType=" + dayOffRequestDayOffType + "&dayOffRequestStarDate=" + dayOffRequestStarDate + "&dayOffRequestEndDate=" + dayOffRequestEndDate + "&dayOffRequestFullOrHalf=" + dayOffRequestFullOrHalf + "&dayOffRequestRemarks=" + dayOffRequestRemarks + "&dayOffRewquestTotalDays=" + dayOffRewquestTotalDays;
            $('#' + domID).load(url);

            console.log(url)
        }

        function testfungsi(domID, masterDayOffTypeValue)
        {
            var url = "/HRDayOff/TestAction/?masterDayOffTypeValue=" + masterDayOffTypeValue;
            $('#' + domID).load(url);
        }

        function checkThreeMonth(dateRequestStartDate, dateRequestEndDate)
        {
            var monthDateRequestStartDate = dateRequestStartDate.getMonth();
            var intMonthDateRequestStartDate = parseInt(monthDateRequestStartDate);

            var monthDateRequestEndDate = dateRequestEndDate.getMonth();
            
            var MonthInThreeMonth = intMonthDateRequestStartDate + parseInt(3);

            var setThreeMonthInMonth = new Date(dateRequestStartDate.setMonth(MonthInThreeMonth));
            var setThreeMonthInDate = new Date(dateRequestStartDate.setDate(setThreeMonthInMonth.getDate() - 1));

            var strInThreeMonth = (setThreeMonthInDate.getMonth() + 1) + '/' + setThreeMonthInDate.getDate() + '/' + setThreeMonthInDate.getFullYear();

            return setThreeMonthInDate;
        }

        function checkOneAndHalfMonth(dateRequestStartDate, dateRequestEndDate)
        {
            var monthDateRequestStartDate = dateRequestStartDate.getMonth();
            var intMonthDateRequestStartDate = parseInt(monthDateRequestStartDate);

            var MonthInOneMonth = intMonthDateRequestStartDate + parseInt(1);

            var setMonthInOneMonth = new Date(dateRequestStartDate.setMonth(MonthInOneMonth));
            var setDateInOneMonth = new Date(dateRequestStartDate.setDate(setMonthInOneMonth.getDate() - 1));

            var strInOneMonth = (setDateInOneMonth.getMonth() + 1) + '/' + setDateInOneMonth.getDate() + '/' + setDateInOneMonth.getFullYear();

            var dateSetDateInOneMonth = new Date(setDateInOneMonth.setDate(setDateInOneMonth.getDate() + 15));

            return dateSetDateInOneMonth;
        }

        function checkPublicHolidays(dateStartRequestDate, dateEndRequestDate)
        {
            

            var numberPublicHolidays = 0;
            var year2016 = "2016";
            var year2017 = "2017";
            var year2018 = "2018";

            for (var d = dateStartRequestDate; d <= dateEndRequestDate; d.setDate(d.getDate() + 1))
            {
                var checkDate = new Date(d);
                var dateCheckDate = checkDate.getDate();
                var monthCheckDate = checkDate.getMonth() + 1;
                var yearCheckDate = checkDate.getFullYear();
                var strCheckDate = dateCheckDate + '/' + monthCheckDate + '/' + yearCheckDate;

                var tahunBaru = new Date("01/01/2016");
                var dateTahunBaru = tahunBaru.getDate();
                var monthTahunBaru = tahunBaru.getMonth() + 1;
                var yearTahunBaru = tahunBaru.getFullYear();
                var strTahunBaru = dateTahunBaru + '/' + monthTahunBaru + '/' + yearTahunBaru;

                var imlek = new Date("02/08/2016");
                var dateImlek = imlek.getDate();
                var monthImlek = imlek.getMonth() + 1;
                var yearImlek = imlek.getFullYear();
                var strImlek = dateImlek + '/' + monthImlek + '/' + yearImlek;

                var idulAdha = new Date("09/12/2016");
                var dateIdulAdha = idulAdha.getDate();
                var monthIdulAdha = idulAdha.getMonth() + 1;
                var yearIdulAdha = idulAdha.getFullYear();
                var strIdulAdha = dateIdulAdha + '/' + monthIdulAdha + '/' + yearIdulAdha;

                var nyepi = new Date("03/09/2016");
                var dateNyepi = nyepi.getDate();
                var monthNyepi = nyepi.getMonth() + 1;
                var yearNyepi = nyepi.getFullYear();
                var strNyepi = dateNyepi + '/' + monthNyepi + '/' + yearNyepi;

                var wafatIsaAlMasih = new Date("03/25/2016");
                var dateWafatIsaAlMasih = wafatIsaAlMasih.getDate();
                var monthWafatIsaAlMasih = wafatIsaAlMasih.getMonth() + 1;
                var yearWafatIsaAlMasih = wafatIsaAlMasih.getFullYear();
                var strWafatIsaAlMasih = dateWafatIsaAlMasih + '/' + monthWafatIsaAlMasih + '/' + yearWafatIsaAlMasih;

                var hariBuruh = new Date("05/01/2016");
                var dateHariBuruh = hariBuruh.getDate();
                var monthHariBuruh = hariBuruh.getMonth() + 1;
                var yearHariBuruh = hariBuruh.getFullYear();
                var strHariBuruh = dateHariBuruh + '/' + monthHariBuruh + '/' + yearHariBuruh;

                var kenaikanYesus = new Date("05/05/2016");
                var dateKenaikanYesus = kenaikanYesus.getDate();
                var monthKenaikanYesus = kenaikanYesus.getMonth() + 1;
                var yearKenaikanYesus = kenaikanYesus.getFullYear();
                var strKenaikanYesus = dateKenaikanYesus + '/' + monthKenaikanYesus + '/' + yearKenaikanYesus;

                var israMiraj = new Date("05/06/2016");
                var dateIsraMiraj = israMiraj.getDate();
                var monthIsraMiraj = israMiraj.getMonth() + 1;
                var yearIsraMiraj = israMiraj.getFullYear();
                var strIsraMiraj = dateIsraMiraj + '/' + monthIsraMiraj + '/' + yearIsraMiraj;

                var waisak = new Date("05/22/2016");
                var dateWaisak = waisak.getDate();
                var monthWaisak = waisak.getMonth() + 1;
                var yearWaisak = waisak.getFullYear();
                var strWaisak = dateWaisak + '/' + monthWaisak + '/' + yearWaisak;

                var idulFitri1 = new Date("07/06/2016");
                var dateIdulFitri1 = idulFitri1.getDate();
                var monthIdulFitri1 = idulFitri1.getMonth() + 1;
                var yearIdulFitri1 = idulFitri1.getFullYear();
                var strIdulFitri1 = dateIdulFitri1 + '/' + monthIdulFitri1 + '/' + yearIdulFitri1;

                var idulFitri2 = new Date("07/07/2016");
                var dateIdulFitri2 = idulFitri1.getDate();
                var monthIdulFitri2 = idulFitri1.getMonth() + 1;
                var yearIdulFitri2 = idulFitri1.getFullYear();
                var strIdulFitri2 = dateIdulFitri2 + '/' + monthIdulFitri2 + '/' + yearIdulFitri2;

                var hutRI = new Date("08/17/2016");
                var dateHUTRI = hutRI.getDate();
                var monthHUTRI = hutRI.getMonth() + 1;
                var yearHUTRI = hutRI.getFullYear();
                var strHUTRI = dateHUTRI + '/' + monthHUTRI + '/' + yearHUTRI;

                var tahunBaruIslam = new Date("10/02/2016");
                var dateTahunBaruIslam = tahunBaruIslam.getDate();
                var monthTahunBaruIslam = tahunBaruIslam.getMonth() + 1;
                var yearTahunBaruIslam = tahunBaruIslam.getFullYear();
                var strTahunBaruIslam = dateTahunBaruIslam + '/' + monthTahunBaruIslam + '/' + yearTahunBaruIslam;

                var maulidNabi = new Date("12/12/2016");
                var dateMaulidNabi = maulidNabi.getDate();
                var monthMaulidNabi = maulidNabi.getMonth() + 1;
                var yearMaulidNabi = maulidNabi.getFullYear();
                var strMaulidNabi = dateMaulidNabi + '/' + monthMaulidNabi + '/' + yearMaulidNabi;

                var natal = new Date("12/25/2016");
                var dateNatal = natal.getDate();
                var monthNatal = natal.getMonth() + 1;
                var yearNatal = natal.getFullYear();
                var strNatal = dateNatal + '/' + monthNatal + '/' + yearNatal;
                
                if (strCheckDate == strTahunBaru)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulAdha)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strImlek)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNyepi)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWafatIsaAlMasih)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHariBuruh)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strKenaikanYesus)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIsraMiraj)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strWaisak)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri1)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strIdulFitri2)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strHUTRI)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strTahunBaruIslam)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strMaulidNabi)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }
                if (strCheckDate == strNatal)
                {
                    numberPublicHolidays = numberPublicHolidays + 1;
                }

            }

            return numberPublicHolidays;
        }

        function calcBusinessDays(dDate1, dDate2) { // input given as Date objects
            var iWeeks, iDateDiff, iAdjust = 0;
            if (dDate2 < dDate1) return -1; // error code if dates transposed
            var iWeekday1 = dDate1.getDay(); // day of week
            var iWeekday2 = dDate2.getDay();
            iWeekday1 = (iWeekday1 == 0) ? 7 : iWeekday1; // change Sunday from 0 to 7
            iWeekday2 = (iWeekday2 == 0) ? 7 : iWeekday2;
            if ((iWeekday1 > 5) && (iWeekday2 > 5)) iAdjust = 1; // adjustment if both days on weekend
            iWeekday1 = (iWeekday1 > 5) ? 5 : iWeekday1; // only count weekdays
            iWeekday2 = (iWeekday2 > 5) ? 5 : iWeekday2;

            // calculate differnece in weeks (1000mS * 60sec * 60min * 24hrs * 7 days = 604800000)
            iWeeks = Math.floor((dDate2.getTime() - dDate1.getTime()) / 604800000)

            if (iWeekday1 <= iWeekday2) {
                iDateDiff = (iWeeks * 5) + (iWeekday2 - iWeekday1)
            } else {
                iDateDiff = ((iWeeks + 1) * 5) - (iWeekday1 - iWeekday2)
            }

            iDateDiff -= iAdjust // take into account both days on weekend

            return (iDateDiff + 1); // add 1 because dates are inclusive
        }

        function onSuccess(data)
        {
            window.location.href = data.urlToRedirect;
        }

        function onFailure(data)
        {
            window.location.href = data.urlToRedirect;
        }

        //function OnSelectAssetHolderFrom(e) {
        //    var dataItem = this.dataItem(e.item);
        //    var url = "/HRDataMaster/GetProfessional/" + dataItem.ID;


        //    $.getJSON(url, function (result) {

        //        $('#FullName').prop('value', result[0].Name);
        //        $('#ProjectUnit').prop('value', result[0].Project_Unit);
        //        $('#Position').prop('value', result[0].Position);
        //        $('#PSANumber').prop('value', result[0].PSANumber);
        //        $('#JoinDate').prop('value', result[0].JoinDate);
        //        $('#JoinDate').prop('value', result[0].JoinDateTemp);
        //        $('#RequestorMailAddress').prop('value', result[0].OfficeEmail);
        //        $('#ProfessionalID').prop('value', result[0].ID);

        //    })d

        //}


    </script>
}
