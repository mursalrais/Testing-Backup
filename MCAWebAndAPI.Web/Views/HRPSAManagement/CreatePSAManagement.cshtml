@using MCAWebAndAPI.Model.ViewModel.Form.HR

@model PSAManagementVM

@{
    ViewBag.Title = "Form Create PSA Management";
}

@using (Html.BeginForm("CreatePSAManagement", "HRPSAManagement", FormMethod.Post,
                                                                 new
                                                                 {
                                                                     @class = "form-horizontal",
                                                                     enctype = "multipart/form-data"
                                                                 }))
{
    <fieldset>
        <legend>PSA Management Data</legend>

        @Html.AntiForgeryToken()
        @Html.ValidationSummary()
        <div class="row">
            @Html.Partial("_PSAManagementData", Model)
        </div>
        <legend>Documents</legend>
        <div class="row">
            @Html.Partial("_DocumentDetails", Model)
        </div>
    </fieldset>
    <div class="form-actions">
        <div class="row">
            <div class="col-md-12">
                <button id="submit-button" class="btn btn-primary" type="button" onclick="checkOverlapping()">
                    <i class="fa fa-save"></i>
                    Submit
                </button>
            </div>
        </div>
    </div>
}

    @section scripts{
        <script type="text/javascript">
          
            function checkOverlapping() {

                var tenure = $("#Tenure").val()

                if (($(".k-file").length == 0))
                {
                    alert("Must Upload The Document");
                }
                else
                {

                    if (tenure == 0)
                    {
                        alert("Must Input Tenure Period");
                    }
                    else
                    {
                        var psaRenewalNumber = $("#PSARenewalNumber").val()
                        var strPSARenewal = $("#StrPSARenewal").val()

                        if (strPSARenewal != "0") {

                            var dateOfNewPSA = $("#DateOfNewPSA").val();
                            var dateofNewPSADate = new Date(dateOfNewPSA);
                            var psaExpiryDate = $("#PSAExpiryDate").val();
                            var psaExpiryDateDate = new Date(psaExpiryDate);
                            var dateOfNewPSABefore = $("#DateOfNewPSABefore").val();
                            var dateofNewPSABeforeDate = new Date(dateOfNewPSABefore);
                            var psaExpiredDateBefore = $('#ExpireDateBefore').val();
                            var psaExpiryDateBeforeDate = new Date(psaExpiredDateBefore);

                            //Cek Overlapping Date of New PSA
                            if ((dateofNewPSADate > dateofNewPSABeforeDate) && (dateofNewPSADate < psaExpiryDateBeforeDate)) {
                                //Warning overlapping star tdate

                                var confirmationValue = confirm("Date of New PSA for New Contract is less than PSA Expiry Date on last contract");
                                if (confirmationValue == true) {
                                    $("form").submit();
                                }
                                if (confirmationValue == false) {

                                    return false;
                                }

                            }

                        }
                            //Cek Overlapping PSA Expired Date
                        else if ((dateofNewPSADate > dateofNewPSABeforeDate) && (dateofNewPSADate < psaExpiryDateBeforeDate) && (psaExpiryDateDate < psaExpiredDateBeforeDate)) {
                            //Warning overlapping star date dan end date
                            var confirmationValue = confirm("Range date of New Contract is between of last contract")
                            if (confirmationValue == true) {
                                $("form").submit();
                            }
                            if (confirmationValue == false) {
                                return false;
                            }
                        }
                        else {
                            $("form").submit();
                        }
                    }

                  }
                    
                }

        function onSuccess(data) {
            
            window.location.href = data.urlToRedirect;
        }

        function onFailure(data) {
            
            window.location.href = data.urlToRedirect;
        }
        
        
            function OnSelectAssetHolderFrom(e) {
                var dataItem = this.dataItem(e.item);

                var dateOfNewPSA = $("#DateOfNewPSA").val();

                var url = "/HRPSAManagement/GetRenewal/" + dataItem.ID;

                $.getJSON(url, function (result) {

                    if (result.length != 0) {

                        var psaID = result[0].PSAId;
                        var renewalnumber = result[0].PSARenewalNumber + 1;

                        var strpsarenewal = parseInt(result[0].StrPSARenewal) + 1;
                        var dateofnewpsabefore = result[0].DateNewPSABefore;
                        var projectUnit = result[0].ProjectUnit;
                        var positionID = result[0].PositionID;
                        var strjoinDate = result[0].StrJoinDate;
                        var professionalFullName = result[0].ProfessionalFullName;

                        var joinDate = new Date(strjoinDate);
                        var dateJoinDate = joinDate.getDate();
                        var monthJoinDate = joinDate.getMonth();
                        var yearJoinDate = joinDate.getFullYear();
                        var joinDateProfessional = (monthJoinDate + 1) + '/' + dateJoinDate + '/' + yearJoinDate;

                        var dateofnewpsa = new Date(dateofnewpsabefore);
                        var datenewpsa = dateofnewpsa.getDate();
                        var datenewpsaint = parseInt(datenewpsa);
                        var calcdatenewpsa = datenewpsaint + 1;
                        var setdateofpsa = new Date(dateofnewpsa.setDate(calcdatenewpsa));
                        var datepsa = setdateofpsa.getMonth() + 1 + '/' + setdateofpsa.getDate() + '/' + setdateofpsa.getFullYear();
                        
                        //Kalkulasi Date of New PSA Kontrak Baru, tanggal paling awal adalah expire date kontrak sebelumnya + 1
                        var expirydatebefore = result[0].ExpiryDateBefore
                        var expdate = new Date(expirydatebefore);
                        var dateexpdate = expdate.getDate();
                        var dateexpdateint = parseInt(dateexpdate);
                        var calcexpdate = dateexpdateint + 1;
                        var setexpdate = new Date(expdate.setDate(calcexpdate));
                        var expirydate = setexpdate.getMonth() + 1 + '/' + setexpdate.getDate() + '/' + setexpdate.getFullYear();
                        
                        $('#HidRenewalNumber').prop('value', renewalnumber);
                        $('#ExpiryDateBefore').prop('value', expirydate);
                        $('#ExpireDateBefore').prop('value', result[0].ExpiryDateBefore);
                        
                        $('#PSAId').prop('value', psaID);

                        $("#IsRenewal_Value").data("kendoDropDownList").select(0);
                        $("#IsRenewal_Value").data("kendoDropDownList").readonly();

                        $("#PSARenewalNumber").prop("readonly", "true");
                        $("#PSARenewalNumber").prop("value", renewalnumber);

                        $("#StrPSARenewal").prop("readonly", "true");
                        $("#StrPSARenewal").prop("value", strpsarenewal);

                        $("#DateOfNewPSA").data("kendoDatePicker").min(datepsa);
                        $("#DateOfNewPSA").prop('value', datepsa);

                        $("#Tenure").prop('value', 0);

                        $("#PSAExpiryDate").prop('value', expirydate);
                        $("#LastWorkingDate").prop('value', expirydate);

                        $("#DateOfNewPSABefore").prop('value', dateofnewpsabefore);

                        $("#ProfessionalMail").prop('value', result[0].ProfessionalMail);
                        $("#ProfessionalFullName").prop('value', professionalFullName);

                        $("#JoinDate").data("kendoDatePicker").readonly();
                        $("#JoinDate").prop('value', joinDateProfessional);
                        

                        $("#ProjectOrUnit_Value").data("kendoDropDownList").value(result[0].ProjectUnit);
                        //$("#Position_Value").data("kendoDropDownList").value(result[0].PositionID);
                        $("#PositionBasedProject_Value").data("kendoDropDownList").value(result[0].PositionID);
                        
                        
                        
                    }

                    if (result.length == 0)
                    {
                        $("#IsRenewal_Value").data("kendoDropDownList").select(1);
                        $("#IsRenewal_Value").data("kendoDropDownList").readonly();

                        
                        $("#PSARenewalNumber").prop("value", 0);
                        $("#StrPSARenewal").prop("value", "0");

                        var psarenewalnumber = $("#PSARenewalNumber").data("kendoNumericTextBox");
                        $("#PSARenewalNumber").prop("readonly", "true");

                        var strpsarenewal = $("#StrPSARenewal").prop("readonly", "true");
                        
                        $('#PSAId').prop('value', 0);
                        
                        var joinDate = $("#JoinDate").val();

                        $("#DateOfNewPSA").data("kendoDatePicker").min(joinDate);
                        $("#DateOfNewPSA").prop("value", joinDate);
                        $("#Tenure").prop('value', 0);
                        $("#PSAExpiryDate").prop('value', joinDate);
                        $("#LastWorkingDate").prop('value', joinDate);

                    }

                })             
            }

            function OnSelectPosition(e) {
                var dataItem = this.dataItem(e.item);
                var urlKeyPosition = "/HRDataMaster/GetKeyPosition/" + dataItem.ID;
                               
                $.getJSON(urlKeyPosition, function (result) {


                    if (result[0].IsKeyPosition == "Yes")
                    {
                        $('#KeyPosition').prop('value', "You must upload file with the file name format: MCC-PSA-MMDDYYYY");
                        $('#DocumentType').prop('value', "MCC No Objection Letter");
                        $('#KeyPositionValue').prop('value', "Yes");
                   
                    }
                    else
                    {
                        $('#KeyPosition').prop('value', "You must upload file with the file name format: PSA-MMDDYYYY");
                        $('#DocumentType').prop('value', "PSA Document");
                        $('#KeyPositionValue').prop('value', "No");
                    }
                })

                
            }

            
            $(document).ready(function () {
                $("#Tenure").kendoNumericTextBox({
                    change: onChange,
                    spin: onSpin
                });

                function onChange() {
                    sumCal();
                }

                function onSpin() {
                    sumCal();
                }

                function sumCal() {

                    var dateOfNewPSA = $("#DateOfNewPSA").val();
                    var dateofnewpsa = new Date(dateOfNewPSA);

                    var monthpsa = dateofnewpsa.getMonth();
                    var monthint = parseInt(monthpsa);
                    var datepsa = dateofnewpsa.getDate();
                    var tenure = $("#Tenure").val();
                    var tenureint = parseInt(tenure);

                    var tenureint = parseInt(tenure);
                    var addtenure = tenureint + monthint;
                    
                    var setmonth = new Date(dateofnewpsa.setMonth(dateofnewpsa.getMonth() + tenureint))
                    var setdate = new Date(dateofnewpsa.setDate(setmonth.getDate() - 1));
                    
                    var psaexpirydates = (setdate.getMonth() + 1) + '/' + (setdate.getDate()) + '/' + setdate.getFullYear();
                    var psaexpirydate = (setmonth.getMonth() + 1) + '/' + (setmonth.getDate()) + '/' + setmonth.getFullYear();

                    
                    $("#PSAExpiryDate").val(psaexpirydate);
                    $("#PSAExpiryDates").val(psaexpirydates);
                    $("#LastWorkingDate").val(psaexpirydate);

                    var datepsa = $("#DateOfNewPSA").val();
                    var dateofnewpsabefore = $("#DateOfNewPSABefore").val();
                    var expirydate = $("#DateOfNewPSABefore").val();
                    var expiredatebefore = $("#ExpireDateBefore").val();
                                      
                }

            });

            $(document).ready(function () {
                    function onChange() {

                    if ($("#IsRenewal_Value").val() == "No")
                    {
                        var joinDate = $("#JoinDate").val();

                        $('#DateOfNewPSA').prop('value', joinDate);
                        $("#DateOfNewPSA").data("kendoDatePicker").min(joinDate);
                        $("#PSAExpiryDate").val(joinDate);

                    }
                    
                }

                $("#JoinDate").kendoDatePicker(
                { change: onChange }
                );

            });

            
           function isrenewalChanged() {

               
               if ($("#IsRenewal_Value").val() == "Yes")
                {
                    $("#PSARenewalNumber").prop("readonly", "true");
                    var renewalnumber = $("#HidRenewalNumber").val();
                    $('#PSARenewalNumber').prop('value', renewalnumber);
                    var expirydate = $("#ExpiryDateBefore").val();
                    $("#DateOfNewPSA").data("kendoDatePicker").min(expirydate);
                    $('#PSAExpiryDate').prop('value', expirydate);

                    
                 }
           }

           function onSelectPSA(e) {
                 
               $.each(e.files, function (index, value) {
                                      
                   if ($("#KeyPositionValue").val() == "Yes")
                   {
                       if ((index == 0))
                       {
                           if (value.name.indexOf("MCC") < 0)
                           {
                               alert("You Must Upload MCC Document");
                               e.preventDefault();
                           }
                           if (value.name.indexOf("MCC") >= 0)
                           {
                               $('#DocumentType').prop('value', "MCC No Objection Letter");
                           }
                       }
                       if(index == 1)
                       {
                           if (value.name.indexOf("PSA") < 0)
                           {
                               alert("You Must Upload PSADocument Document");
                               e.preventDefault();
                           }
                           if (value.name.indexOf("PSA") >= 0)
                           {
                               $('#DocumentType').prop('value', "PSA Document");
                           }
                       }
                   }
                   else
                   {
                       if (value.name.indexOf("PSA") < 0) {
                           alert("You Must Upload PSADocument Document");
                           e.preventDefault();
                       }
                       if (value.name.indexOf("PSA") >= 0) {
                           $('#DocumentType').prop('value', "PSA Document");
                       }
                   }
                   
               });
                
           }

           function filterProjectUnit() {
               return {
                   ProjectUnit: $("#ProjectOrUnit_Value").val()
               };
           }
           
        </script>
    }
