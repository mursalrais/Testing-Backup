@model MCAWebAndAPI.Model.ViewModel.Form.Finance.PettyCashSettlementVM

@*
    Wireframe FIN11: Petty Cash Settlement

        Petty Cash Settlement is a transaction for settlement-reimbursement of petty cash where
        user has already asked for petty cash advance previously.

        Through this feature, user will create the settlement-reimbursement of
        petty cash which results whether user needs to return the excess petty cash advance or
        receive the reimbursement in the case where the actual expense for
        petty cash exceeds the petty cash advance given.

        It is created and maintained by finance.
*@

@using (Html.BeginForm("Save", "FINPettyCashSettlement",
    FormMethod.Post,
    new
    {
        @class = "form-horizontal",
        enctype = "multipart/form-data"
    }))

{
    <fieldset>
        <legend>Petty Cash Settlement</legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Date).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Date)
                        @Html.ValidationMessageFor(m => m.Date)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.PettyCashVoucher).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.PettyCashVoucher)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AmountLiquidated).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.AmountLiquidated)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AmountReimbursedOrReturned).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.AmountReimbursedOrReturned)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Remarks).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Remarks)
                    </div>
                </div>


            </div>
        </div>
    </fieldset>


    <div class="form-actions">
        <div class="row">
            <div class="col-sm-12">
                <button id="submit-button" class="btn btn-primary" type="submit">
                    <i class="fa fa-save"></i>
                    Submit
                </button>
                <button id="submit-cancel" acti class="btn btn-primary" type="button">
                    <i class="fa fa-back"></i>
                    Cancel
                </button>
            </div>
        </div>
    </div>
}


@section scripts{
    <script>
        var PAIDTO_PROFESSIONAL = "Professional";
        var PAIDTO_VENDOR = "Vendor";
        var PAIDTO_DRIVER = "Driver";

        function onSelectPaidTo(e) {
            var data = this.dataItem(e.item);
            var professionalDropDownList = $("#Professional_Value").data("kendoDropDownList");
            var vendorDropDownList = $("#Vendor_Value").data("kendoDropDownList");
            var driverTextbox = $("#Driver");


             switch(data)
            {
                 case PAIDTO_PROFESSIONAL:
                     professionalDropDownList.enable(true);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', true);
                     break;

                 case PAIDTO_VENDOR:
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(true);
                     driverTextbox.prop('readonly', true);
                     break;

                 case PAIDTO_DRIVER :
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', false);
                     break;

                 default:
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', true);
                     break;

            }
        }
    </script>
}
