@model MCAWebAndAPI.Model.ViewModel.Form.Finance.PettyCashSettlementVM

@*
    Wireframe FIN11: Petty Cash Settlement

        Petty Cash Settlement is a transaction for settlement-reimbursement of petty cash where
        user has already asked for petty cash advance previously.

        Through this feature, user will create the settlement-reimbursement of
        petty cash which results whether user needs to return the excess petty cash advance or
        receive the reimbursement in the case where the actual expense for
        petty cash exceeds the petty cash advance given.

        It is created and maintained by finance.
*@

@using (Html.BeginForm("Save", "FINPettyCashSettlement",
    FormMethod.Post,
    new
    {
        @id= "formSPC",
        @class = "form-horizontal",
        enctype = "multipart/form-data"
    }))

{
    <fieldset>
        <legend>Petty Cash Settlement &nbsp; @Model.TransactionNo</legend>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Date).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.EditorFor(m => m.Date)
                        @Html.ValidationMessageFor(m => m.Date)
                        @Html.HiddenFor(m => m.ID)
                        @Html.HiddenFor(m => m.Operation)
                        @Html.HiddenFor(m => m.TransactionNo)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.PettyCashVoucher).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.EditorFor(m => m.PettyCashVoucher)
                        <span id="txtSCAnoError" style="color:#b94a48; font-size:85%; margin-top:10px; display:block;"></span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AdvanceReceivedDate).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.AdvanceReceivedDate)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Status).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(model => model.Status)    
                        <span id="txtRole" style="color:#b94a48; font-size:85%; display:block;" ></span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.PaidTo).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.PaidTo)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Currency).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.Currency)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AmountPaid).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.AmountPaid)
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AmountPaidInWords).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.AmountPaidInWords)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.ReasonOfPayment).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.ReasonOfPayment)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Fund).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.Fund)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.WBS).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.WBS)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.GL).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.DisplayFor(m => m.GL)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.AmountLiquidated).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.EditorFor(m => m.AmountLiquidated)
                        @Html.ValidationMessageFor(m => m.AmountLiquidated)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Amount).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.EditorFor(m => m.Amount, new { HtmlAttributes = new { @class = "textbox-padding6px-readonly", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(m => m.Amount)
                    </div>
                </div>
                

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Remarks).Class("col-sm-3 control-label")
                    <div class="col-sm-7">
                        @Html.EditorFor(m => m.Remarks)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Documents).Class("col-md-3 control-label")
                    <div class="col-md-7">
                        @Html.EditorFor(m => m.Documents)
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.DocumentUrl))
                {
                    <div class="form-group">
                        <div class="col-sm-12">
                            <div class="form-group">
                                @Html.Bootstrap().LabelFor(m => m).Class("col-sm-3 control-label")
                                <div class="col-sm-7">
                                    <button id="application-document-button" class="btn btn-default" type="button">
                                        Click Here to go to Petty Cash Settlement
                                    </button>
                                </div>
                            </div>
                        </div>
                        <script>
                $('#application-document-button').click(function () {
                    parent.postMessage({
                        result : "Success", urlToRedirect : "@Model.DocumentUrl" }, "@Model.DocumentUrl" );
                });
                        </script>
                    </div>
                }

            </div>
        </div>
    </fieldset>


    <div class="form-actions">
        <div class="row">
            <div class="col-sm-12">
                @if (Model.ID > 0)
                {
                    <button id="print-button" class="btn btn-default" type="button">
                        Print
                    </button>
                }
                &nbsp;

                <button id="submit-button" class="btn btn-primary" type="submit">
                    <i class="fa fa-save"></i>
                    Submit
                </button>

                <a href="@ViewBag.CancelUrl" target='_parent'>
                    <input class="k-button k-button-icontext k-grid-add" size="4" value="Cancel" />
                </a>
            </div>
        </div>
    </div>
}


@section scripts{
    <script>
        var statusPaid = "Paid";

        function onSelectPaymentVoucher(e) {
            $('#txtSCAnoError').text('');
            var data = this.dataItem(e.item);

            var url = '@Url.Action("GetPaymentVoucherById", "FINPettyCashSettlement")';

            $.ajax({
                url: url,
                type: "GET",
                data: { paymentVoucherID: data.ID },
                success: function (response) {
                    $('#AdvanceReceivedDate').val(response.AdvDate);
                    $('#Status').val(response.Status);
                    $('#PaidTo').val(response.PaidTo);
                    $('#Currency_Value').val(response.Currency);
                    $('#AmountPaid').val(response.Amount);
                    $('#AmountPaidInWords').val(response.AmountInWords);
                    $('#ReasonOfPayment').val(response.Reason);
                    $('#WBS').val(response.WBS);
                    $('#GL').val(response.GL);
                    
                    if(statusPaid !== $('#Status').val())
                    {
                        $('#txtRole').text('The status of the petty cash voucher is still in progress. The settlement cannot be made');
                    }
                    else
                    {
                        $('#txtRole').text('');
                    }
                },
                error: function (response) {
                   
                }
            });
        }

        $(document).ready(function () {
            var numerictextbox = $("#Amount").data("kendoNumericTextBox");
            numerictextbox.readonly();

            var dropdownlist = $("#PettyCashVoucher_Value").data("kendoDropDownList");
            dropdownlist.enable(true);

            $('#print-button').click(function (e) {
                if (!$('form').valid()) {
                    alert('Please make sure that all required fields are filled');
                    return;
                }

                var actionUrl = $('form').attr("action");
                var newActionUrl = actionUrl.replace("Save", "Print");

                $('form').prop('action', newActionUrl);
                $('form').submit();

            });
        });

        $("#formSPC").on('submit', function() {
            var IsError = 0;

            // do validation here
            var voucherNo = $('#PettyCashVoucher_Value').val();
            if (voucherNo === '0') {
                $('#txtSCAnoError').text('Petty Cash Voucher No is required.');
                IsError = 1
            }
           

            var status = $('#Status').val();
            if ((status !== statusPaid) || IsError === 1)
                return false;
            else
                return true;
        });


        $('#AmountLiquidated').change(function () {
            var amoutPaid = $('#AmountPaid').val();
            var amoutLiquidated = $('#AmountLiquidated').val();

            var amout = amoutLiquidated - amoutPaid;

            var amtcontrol = $('#Amount').data("kendoNumericTextBox");
            amtcontrol.value(amout);
        });

        $('#submit-cancel').click(function (e) {
            $('#txtRole').text('');
            
        });

    </script>
}

<style media="screen">
    .k-button-icontext {
        height: 35px;
        margin-left: 5px;
    }
</style>
