@using MCAWebAndAPI.Model.ViewModel.Form.HR
@model ProfessionalPerformanceEvaluationVM

<div class="col-sm-12">

    @(Html.Kendo().Grid(Model.ProfessionalPerformanceEvaluationDetails)
        .Name("ProfessionalPerformanceEvaluationDetails")
        .ToolBar(tools => tools.Create().Text("Add New"))
        .Editable(editable => editable.Mode(GridEditMode.InCell)
        .CreateAt(GridInsertRowPosition.Bottom))
        .Columns(columns =>
        {
            columns.Bound(p => p.Category).ClientTemplate("#= Category.Text #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].Category.Text' value='#= Category.Text #' />"
            )
            .EditorViewData(new
            {
                BindTo = ProjectOrUnitGoalsDetailVM.GetCategoryOptions()
            });
            columns.Bound(p => p.IndividualGoalAndPlan).ClientTemplate("#= IndividualGoalAndPlan #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].IndividualGoalAndPlan' value='#= IndividualGoalAndPlan #' />"
            );
            columns.Bound(p => p.PlannedWeight).ClientTemplate("#= PlannedWeight #%" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].PlannedWeight' value='#= PlannedWeight #' />"
            );
            columns.Bound(p => p.ActualWeight).ClientTemplate("#= ActualWeight #%" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].ActualWeight' value='#= ActualWeight #' />"
            );
            columns.Bound(p => p.Score).ClientTemplate("#= Score #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].Score' value='#= Score #' />"
            );
            columns.Bound(p => p.TotalScore).ClientTemplate("#= TotalScore #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].TotalScore' value='#= TotalScore #' />"
            );
            columns.Bound(p => p.Output).ClientTemplate("#= Output #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].Output' value='#= Output #' />"
            );
            columns.Bound(p => p.ID).Hidden().ClientTemplate("#= ID #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].ID' value='#= ID #' />"
            );
            columns.Bound(p => p.EditMode).Hidden().ClientTemplate("#= EditMode #" +
            "<input type='hidden' name='ProfessionalPerformanceEvaluationDetails[#= getProfessionalPerformancePlanDetail(data)#].EditMode' value='#= EditMode #' />"
            );
            columns.Command(command => command.Custom("Delete").HtmlAttributes(new { @class = "btn btn-danger" })
            .Click("onDeleteKendoDetail")).Width(100);
        })
        .Events(e =>
        {
            e.Edit("onEditKendoDetail");
            e.DataBound("onDataBoundProfessionalPerformanceEvaluationDetails");
        })
        .DataSource(dataSource => dataSource.Ajax().Events(events =>
        {
            events.Change("onChange");
        })
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(m => m.Category).DefaultValue(ProjectOrUnitGoalsDetailVM.GetCategoryDefaultValue());
        })
        .ServerOperation(false)
        )
    )
</div>
<div class="col-sm-12">
    <div class="form-actions">
        <div class="form-group">
            @Html.Bootstrap().LabelFor(m => m.OverallTotalScore).Class("col-sm-4 control-label")
            <div class="col-sm-8">
                @Html.DisplayFor(m => m.OverallTotalScore)
            </div>
        </div>
    </div>
</div>

<script>
    function onChange(e) {
        var overallTotalScore = 0;
        var recordsOnCurrentView = 0;
        if (e.action === "itemchange") {
            if (e.field === "ActualWeight" || e.field === "Score") {
                var model = e.items[0];
                var TotalScore = (model.ActualWeight / 100) * model.Score;
                model.set('TotalScore', (TotalScore));
                var grid = $("#ProfessionalPerformanceEvaluationDetails").data("kendoGrid")
                var dataSource = grid.dataSource;
                //records on current view / page
                recordsOnCurrentView = dataSource.view().length;
                for (var i = 0; i < recordsOnCurrentView; i++) {
                    overallTotalScore = overallTotalScore + dataSource._data[i].TotalScore;
                }
                overallTotalScore = overallTotalScore / recordsOnCurrentView;
                $('#OverallTotalScore').prop('value', overallTotalScore);
            }
        }
    }

    function getProfessionalPerformancePlanDetail(dataItem) {
        var data = $("#ProfessionalPerformanceEvaluationDetails").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onDataBoundProfessionalPerformanceEvaluationDetails(e) {
        var grid = $("#ProfessionalPerformanceEvaluationDetails").data("kendoGrid");
        hideDeletedRowKendoDetail(grid);
    }
</script>
