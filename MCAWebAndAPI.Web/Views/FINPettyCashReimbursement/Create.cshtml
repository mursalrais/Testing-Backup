@model MCAWebAndAPI.Model.ViewModel.Form.Finance.PettyCashReimbursementVM

@*
    Wireframe FIN12: Petty Cash Reimbursement

        Petty Cash Reimbursement is a transaction for the reimbursement of petty cash only when
        user has not asked for any petty cash advance.

        Through this feature, finance will create the reimbursement of petty cash which results in
        user needs to receive the reimbursement.
*@

@using (Html.BeginForm("Create", "FINPettyCashReimbursement",
                FormMethod.Post,
                new
                {
                    @class = "form-horizontal",
                    enctype = "multipart/form-data"
                }))

{
    <fieldset>
        <legend>Petty Cash Reimbursement</legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Date).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Date)
                        @Html.ValidationMessageFor(m => m.Date)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.PaidTo).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.PaidTo)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Professional).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Professional)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Vendor).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Vendor)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Driver).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Driver)
                    </div>
                </div>

                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Amount).Class("col-sm-4 control-label")
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Amount)
                    </div>
                </div>


            </div>
        </div>
    </fieldset>


    <div class="form-actions">
        <div class="row">
            <div class="col-sm-12">
                <button id="submit-button" class="btn btn-primary" type="submit">
                    <i class="fa fa-save"></i>
                    Submit
                </button>
                <button id="submit-cancel" acti class="btn btn-primary" type="button">
                    <i class="fa fa-back"></i>
                    Cancel
                </button>
            </div>
        </div>
    </div>
}


@section scripts{
    <script>
        var PAIDTO_PROFESSIONAL = "Professional";
        var PAIDTO_VENDOR = "Vendor";
        var PAIDTO_DRIVER = "Driver";

        function onSelectPaidTo(e) {
            var data = this.dataItem(e.item);
            var professionalDropDownList = $("#Professional_Value").data("kendoDropDownList");
            var vendorDropDownList = $("#Vendor_Value").data("kendoDropDownList");
            var driverTextbox = $("#Driver");


             switch(data) 
            {
                 case PAIDTO_PROFESSIONAL:
                     professionalDropDownList.enable(true);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', true);
                     break;

                 case PAIDTO_VENDOR:
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(true); 
                     driverTextbox.prop('readonly', true);
                     break;
                
                 case PAIDTO_DRIVER :
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', false);
                     break;

                 default:
                     professionalDropDownList.enable(false);
                     vendorDropDownList.enable(false);
                     driverTextbox.prop('readonly', true);
                     break;

            }
        }
    </script>
}
