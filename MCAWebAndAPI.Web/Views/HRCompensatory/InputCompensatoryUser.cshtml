
@using MCAWebAndAPI.Model.ViewModel.Form.HR
@using MCAWebAndAPI.Web.Helpers

@model CompensatoryVM

@{
    ViewBag.Title = "Input Compensatory User";
}

@using (Ajax.BeginForm("CreateHeaderCompensatory", "HRCompensatory",
                                                                                    FormMethod.Post,
                                                                                    new AjaxOptions
                                                                                    {
                                                                                        OnBegin = "onBeginForm",
                                                                                        OnComplete = "onCompleteForm",
                                                                                        OnSuccess = "onSuccessFormEmbed",
                                                                                        OnFailure = "onFailureForm"
                                                                                    }, new { @class = "form-horizontal" }))
{
    <fieldset>
        @Html.HiddenFor(m => m.cmpID)
        @Html.HiddenFor(m => m.cmpName)
        @Html.HiddenFor(m => m.cmpPosition)
        @Html.HiddenFor(m => m.Requestor)
        @Html.HiddenFor(m => m.StatusForm)
        @Html.HiddenFor(m => m.cmpEmail)

        <input type="hidden" id="loadpage" value="0">
        <div class="row">
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.cmpName).Class("col-xs-2 control-label")
                <div class="col-xs-4">
                    <input id="ProfName" class="form-control" value="" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.cmpProjUnit).Class("col-xs-2 control-label")
                <div class="col-xs-3">
                    @Html.EditorFor(m => m.cmpProjUnit)
                </div>
            </div>
        </div>
       
        <div class="col-sm-12">
            <div class="form-group" id="ParentDiv">
                <div class="col-sm-8">
                    <input id="Status" class="form-control" value="" />
                </div>
            </div>
        </div>
        <legend>Compensatory list</legend>
        <div id="compensatorylist" class="row"></div>

    
    </fieldset>
}

@if (Model.StatusForm == "" || Model.StatusForm == "Draft")
{
    <div class="row pull-right">
        <div class="col-sm-12">
            <button id="submit-button" class="btn btn-primary" type="submit">
                <i class="fa fa-save"></i>
                Submit For Approval
            </button>
            <button id="submit-draft-button" class="btn btn-primary" type="submit">
                <i class="fa fa-clipboard"></i>
                Save As Draft
            </button>
            <button id="cancel-button" class="btn btn-primary">
                <i class="fa fa-ban"></i>
                Cancel
            </button>
        </div>
    </div>
}

@if (Model.StatusForm != "")
{
    <div class="row pull-right">
        <div class="col-sm-12">
            <button id="submitonly-button" class="btn btn-primary" type="submit">
                <i class="fa fa-clipboard"></i>
                Submit
            </button>
        </div>
    </div>
}

<legend>Approval Workflow</legend>
<div id="workflow-placeholder" class="row"></div>

@if (Model.StatusForm == "Approved")
            {
    <div class="row pull-right">
        <div class="col-sm-12">
            <button id="print-button" class="btn btn-primary" type="button">
                <i class="fa fa-print"></i>
                Print
            </button>
        </div>
    </div>
}
@section scripts{

    <script>

                    function filterLevel() {
                        return {
                            idProf: $('#ddlProfessional_Value').data("kendoDropDownList").dataItem($('#ddlProfessional_Value').data("kendoDropDownList").select()).ID
                        };
                    }

                    function OnChangeCompensatory(e) {
                        var dataItem = this.dataItem(e.item);
                        var idComp = null;
                        var CompStatus = null;

                        if (dataItem != null) {
                            idComp = dataItem.ID;
                            CompStatus = dataItem.CompensatoryStatus;
                        }
                            $("#StatusForm").prop("value", CompStatus);

                            var url = "/HRCompensatory/GetCompensatoryDetailsUser?idComp=" + idComp;
                            showLoading();
                            $('#compensatorylist').load(url, function (response, status, xhr) {
                                if (status == "success") {
                                    hideLoading();
                                }
                            });
                            $("#cmpID").prop("value", idComp);

                    };


        $(document).ready(function () {
            var eMail = $("#cmpEmail").val();
                        showLoading();
                        if (eMail != null) {
                            displayWorkflowRouter("workflow-placeholder", "@ViewBag.ListName", eMail);
                        }

                        var nameProf = $("#cmpName").val() + " - " + $("#cmpPosition").val()
                        $("#ProfName").prop("value", nameProf);
                        $("#ProfName").prop('readonly', 'true');

                        var stat = $("#StatusForm").val();
                        $("#Status").prop("value", stat);
                        $("#Status").prop('readonly', 'true');

                        var cmpId = $("#cmpID").val();

                        var url = "/HRCompensatory/GetCompensatoryDetailsUser?idComp=" + cmpId;
                        showLoading();
                        $('#compensatorylist').load(url, function (response, status, xhr) {
                            if (status == "success") {
                                hideLoading();
                            }
                        });

                        $("#cancel-button").click(function () {
                            showLoading();
                            var url = "/HRCompensatory/GetCompensatoryDetailsUser?idComp=" + $("#cmpID").val();

                            $('#compensatorylist').load(url, function (response, status, xhr) {
                                if (status == "success") {
                                    hideLoading();
                                }
                            });
                        });

                        $("#submitonly-button").click(function () {
                            $("#StatusForm").prop("value", "submit");
                            $("form").submit();
                        });

                        $("#submit-button").click(function () {
                            $("#StatusForm").prop("value", " ");
                            $("form").submit();
                        });

                        $("#submit-draft-button").click(function () {
                            $("#StatusForm").val("Draft")
                            $("form").submit();
                        });

                        $('#reject1-button').click(function (e) {
                            $("#StatusForm").val("Reject")
                            $("form").submit();
                        });

                        $('#print-button').click(function (e) {
                            $("#ParentDiv").show();
                            var url = "/HRCompensatory/PrintCompensatoryRequest";
                            submitFormToPrint(url);
                        });

                    });

                    function getDayName(date) {
                        var day = new Array();
                        day[0] = "Sunday";
                        day[1] = "Monday";
                        day[2] = "Tuesday";
                        day[3] = "Wednesday";
                        day[4] = "Thursday";
                        day[5] = "Friday";
                        day[6] = "Saturday";

                        if (date != null) {
                            return day[date.getDay()];
                        };
                    }

                    function onChange(e) {
                        var container = e.container;
                        if (e.action === "itemchange") {
                            var model = e.items[0];

                            if (model.StartTime != null && model.FinishTime != null) {
                                var start = model.StartTime.getHours();
                                var finish = model.FinishTime.getHours();
                                var finishsec = model.FinishTime.getSeconds();
                                var range;
                                var rowgrid = $("#CompensatoryDetails").data("kendoGrid").tbody.find("tr");
                                var i = -1
                                var j = -1
                                rowgrid.each(function (e) {
                                    i++;
                                    var xdate = $("#Dateid" + i).val();
                                    rowgrid.each(function (e) {
                                        j++;
                                        var ydate = $("#Dateid" + j).val();
                                        if (i !== j) {
                                            if (xdate == ydate) {
                                                alert("Date you have chosen already exists, please choose another date..!!")
                                            }
                                        }
                                    });
                                });

                                if ((finish + finishsec) <= start) {
                                    alert("FinishTime can not be smaller than the starttime..!!")
                                }

                                if (start < finish) {
                                    range = finish - start

                                    if (model.CmpTotalHours != range) {
                                        model.set("CmpTotalHours", range);
                                    }

                                    if (range >= 4) {
                                        totday = 1
                                    } else {
                                        totday = 0.5
                                    }

                                    if (model.TotalDay != totday) {
                                        model.set("TotalDay", totday);
                                    }
                                }
                            }
                        }
                    }

                    function onDataBoundDependentDetails(e) {
                        var grid = $("#CompensatoryDetails").data("kendoGrid");
                        hideDeletedRowKendoDetail(grid);
                    }

                    function GetDetailComplist(dataItem) {
                        var data = $("#CompensatoryDetails").data("kendoGrid").dataSource.data();
                        return data.indexOf(dataItem);
                    }

</script>
}





