@using MCAWebAndAPI.Model.ViewModel.Form.HR
@model IEnumerable<CompensatoryDetailVM>

<div class="col-xs-12">

    @(Html.Kendo().Grid(Model)
    .Name("CompensatoryDetails")
    .ToolBar(tools => tools.Create().Text("Add New"))
        .Editable(editable => editable.Mode(GridEditMode.InCell)
        .CreateAt(GridInsertRowPosition.Top))
    .Columns(columns =>
    {
        columns.Bound(p => p.CmpActiv).ClientTemplate("#= CmpActiv #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpActiv' value='#= CmpActiv #' />");

        columns.Bound(p => p.CmpDate).ClientTemplate("#= kendo.toString(CmpDate, \"MM/dd/yyyy \") #" +
        "<input type='hidden' id='Dateid#= GetDetailComplist(data)#' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpDate' value='#= CmpDate #' />");

        columns.Bound(p => p.CmpDate).ClientTemplate("#=getDayName(CmpDate)#"
                           ).Width(150);

        columns.Bound(p => p.StartTime).ClientTemplate("#= kendo.toString(StartTime, \"hh:mm tt\") #" +
        "<input id='start' type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].StartTime' value='#= StartTime #' />");

        columns.Bound(p => p.FinishTime).ClientTemplate("#= kendo.toString(FinishTime, \"hh:mm tt\") #" +
       "<input id='end' type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].FinishTime' value='#= FinishTime #' />");

        columns.Bound(p => p.CmpTotalHours).ClientTemplate("<input name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpTotalHours' value='#= CmpTotalHours #' style='width: 15px; border: none; background-color: transparent' />");

        columns.Bound(p => p.TotalDay).ClientTemplate("<input name='CompensatoryDetails[#= GetDetailComplist(data)#].TotalDay' value='#= TotalDay #' style='width: 20px; border: none; background-color: transparent' />");

        columns.Bound(p => p.remarks).ClientTemplate("#= remarks #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].remarks' value='#= remarks #' />");

        columns.Command(command => command.Custom("Delete").HtmlAttributes(new { @class = "btn btn-danger" })
           .Click("onDeleteKendoDetail")).Width(100);

        columns.Bound(p => p.CmpHID).Hidden().ClientTemplate("#= CmpHID #" +
       "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpHID' value='#= CmpHID #' />"
        );

        columns.Bound(p => p.CmpID).Hidden().ClientTemplate("#= CmpID #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpID' value='#= CmpID #' />"
         );

        columns.Bound(p => p.EditMode).Hidden().ClientTemplate("#= EditMode #" +
           "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].EditMode' value='#= EditMode #' />"
         );

    })
    .Events(e =>
    {
        e.Edit("onChange");
        e.DataBound("onDataBoundDependentDetails");
    })
    .DataSource(dataSource => dataSource.Ajax()

    .Model(model =>
    {
        model.Id(p => p.ID);
    })
    .ServerOperation(false)
    )
)
</div>
<script>
      function GetDetailComplist(dataItem) {
        var data = $("#CompensatoryDetails").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onDataBoundDependentDetails(e) {
        var grid = $("#CompensatoryDetails").data("kendoGrid");
        hideDeletedRowKendoDetail(grid);
    }

    function onChange(e) {
        var container = e.container;
            var tr = container.closest('tr');
            var data = this.dataItem(tr); 
            var start = data.StartTime.getHours();
            var finish = data.FinishTime.getHours();
            var finishsec = data.FinishTime.getHours();
            var range;
            var rowgrid = $("#CompensatoryDetails").data("kendoGrid").tbody.find("tr");
            var i = -1
            var j = -1
            var tr = container.closest('tr');

            rowgrid.each(function (e) {
                i++;
                var xdate = $("#Dateid" + i).val();
                rowgrid.each(function (e) {
                    j++;
                    var ydate = $("#Dateid" + j).val();
                    if (i !== j) {
                        if (xdate == ydate) {
                            alert("Date you have chosen already exists, please choose another date..!!")
                        }
                    }
                });
            });
            debugger;
            if ((finish + finishsec) <= start) {
                alert("FinishTime can not be smaller than the starttime..!!")
            }

            if (start < finish) {
                range = finish - start
                data.set("CmpTotalHours", range);
                data.CmpTotalHours = range;
                data.set("TotalDay", range / 12)
            }
            data.set("EditMode", 1);
        }
   
</script>

