@using MCAWebAndAPI.Model.ViewModel.Form.HR
@model IEnumerable<CompensatoryDetailVM>

<div class="col-xs-12">

    @(Html.Kendo().Grid(Model)
    .Name("CompensatoryDetails")
    .ToolBar(tools => tools.Create().Text("Add New"))
        .Editable(editable => editable.Mode(GridEditMode.InCell)
        .CreateAt(GridInsertRowPosition.Top))
    .Columns(columns =>
    {
        columns.Bound(p => p.CmpActiv).ClientTemplate("#= CmpActiv #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpActiv' value='#= CmpActiv #' />");

        columns.Bound(p => p.CmpDate).ClientTemplate("#= kendo.toString(CmpDate, \"MM/dd/yyyy \") #" +
        "<input type='hidden' id='Dateid#= GetDetailComplist(data)#' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpDate' value='#= CmpDate #' />");

        columns.Bound(p => p.GetDayStr).ClientTemplate("#= GetDayStr #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].GetDayStr' value='#= GetDayStr #' />");

        columns.Bound(p => p.StartTime).ClientTemplate("#= kendo.toString(StartTime, \"hh:mm tt\") #" +
        "<input id='start' type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].StartTime' value='#= StartTime #' />");

        columns.Bound(p => p.FinishTime).ClientTemplate("#= kendo.toString(FinishTime, \"hh:mm tt\") #" +
       "<input id='end' type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].FinishTime' value='#= FinishTime #' />");

        columns.Bound(p => p.CmpTotalHours).ClientTemplate("<input name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpTotalHours' value='#= CmpTotalHours #' style='width: 15px; border: none; background-color: transparent' />");

        columns.Bound(p => p.TotalDay).ClientTemplate("<input name='CompensatoryDetails[#= GetDetailComplist(data)#].TotalDay' value='#= TotalDay #' style='width: 20px; border: none; background-color: transparent' />");

        columns.Bound(p => p.remarks).ClientTemplate("#= remarks #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].remarks' value='#= remarks #' />");

        columns.Bound(p => p.CmpHID).Hidden().ClientTemplate("#= CmpHID #" +
       "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpHID' value='#= CmpHID #' />"
        );

        columns.Bound(p => p.CmpID).Hidden().ClientTemplate("#= CmpID #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].CmpID' value='#= CmpID #' />"
         );

        columns.Bound(p => p.EditMode).Hidden().ClientTemplate("#= EditMode #" +
           "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].EditMode' value='#= EditMode #' />"
         );

        columns.Bound(p => p.GetDateStr).Hidden().ClientTemplate("#= GetDateStr #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].GetDateStr' value='#= GetDateStr #' />");

        columns.Bound(p => p.GetStartStr).Hidden().ClientTemplate("#= GetStartStr #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].GetStartStr' value='#= GetStartStr #' />");

        columns.Bound(p => p.GetFinishStr).Hidden().ClientTemplate("#= GetFinishStr #" +
        "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].GetFinishStr' value='#= GetFinishStr #' />");

        columns.Bound(p => p.GetDayStr).Hidden().ClientTemplate("#= GetDayStr #" +
       "<input type='hidden' name='CompensatoryDetails[#= GetDetailComplist(data)#].GetDayStr' value='#= GetDayStr #' />");

    })
    .Scrollable(scrollable => scrollable.Height("auto"))
     .Resizable(resizable => resizable.Columns(true))
    .Events(e =>
    {
        e.Edit("onChange");
    })
    .DataSource(dataSource => dataSource.Ajax()

    .Model(model =>
    {
        model.Id(p => p.ID);
    })
    .ServerOperation(false)
    )
    )
</div>
<script>
</script>

