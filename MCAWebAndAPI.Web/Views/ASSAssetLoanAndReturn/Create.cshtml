@using MCAWebAndAPI.Model.ViewModel.Form.Asset

@model AssetLoanAndReturnHeaderVM

@*@using (Ajax.BeginForm("Submit", "ASSAssetLoanAndReturn",
                                                                                                                                        FormMethod.Post,
                                                                                                                                        new AjaxOptions
                                                                                                                                        {
                                                                                                                                            OnBegin = "onBeginForm",
                                                                                                                                            OnComplete = "onCompleteForm",
                                                                                                                                            OnSuccess = "onSuccessFormEmbed",
                                                                                                                                            OnFailure = "onFailureForm"
                                                                                                                                        }, new { @class = "form-horizontal" }))*@



    <form class="form-horizontal" method="post" action="/ASSAssetLoanAndReturn/Submit" id="create-asset-acquisition-form" enctype="multipart/form-data">
        <fieldset>
            <legend>Form Asset Loan & Return</legend>
            @Html.AntiForgeryToken()
            @Html.ValidationSummary()

            <div class="col-md-6">
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.TransactionType).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @Html.DisplayFor(m => m.TransactionType)
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Professional).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.Professional)
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Project).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @*@Html.DisplayFor(m => m.Project)*@
                        <input type="text" disabled name="ProjectUnit" id="ProjectUnit" value="" style="width : 100%" />
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.ContactNo).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @*@Html.DisplayFor(m => m.ContactNo)*@
                        <input type="text" disabled name="ContactNo" id="ContactNo" style="width: 100%;" />
                        @*<input type="text" disabled name="ContactNo" id="ContactNo" value="" style="width : 100%" />*@
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.LoanDate).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.LoanDate, new { id = "loandate" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Bootstrap().LabelFor(m => m.Purpose).Class("col-md-4 control-label")
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.Purpose)
                    </div>
                </div>
            </div>

            <legend>Asset Loan and Return Detail</legend>
            <div class="row">
                @Html.Partial("_Details", Model.AssetLoanAndReturnItem)
            </div>

        </fieldset>

        @Html.HiddenFor(m => m.ID)
        @Html.HiddenFor(m => m.CancelURL)
        <div>
            <center>
                <input class="k-button k-button-icontext k-grid-add" type="submit" onclick="return saveAssignment()" value="Save" id="submit" />
                <a href="@Model.CancelURL" target='_parent'>
                    <input class="k-button k-button-icontext k-grid-add" size="4" value="Cancel" />
                </a>
            </center>
        </div>

        </form>

        

        @section scripts{
            <script type="text/javascript">


                function saveAssignment() {
                    var asset = document.getElementsByClassName("asset");
                    var estdate = document.getElementsByClassName("estdate");
                    var loandate = new Date($('#LoanDate').val());
                    var estdate = new Date($('.estdate').val());
                    var grid = $('#AssetLoanAndReturnItem').data("kendoGrid").dataSource.data();

                    var displayedData = $("#AssetLoanAndReturnItem").data().kendoGrid.dataSource.view();
                    var displayedDataAsJSON = JSON.stringify(displayedData);

                    
                    //alert(displayedDataAsJSON);

                    for (var j = 0; j < grid.length; j++) {
                        if (grid[j].EstReturnDate < loandate) {
                            var data = { errorMessage: "Est Return Date cannot be less than Loan Date", success: false };
                            showModalWindow(data);
                            return false;
                        }
                    }

                    alert("PLEASE RETURN THE ASSET BASED ON ESTIMATION RETURN DATE");

                    console.log(loandate);

                }



                function onSelectedAcceptanceMemo(e) {
                    var res = this.dataItem(e.item).split("-")
                    //alert("Acceptance Memo ID : " + res[0]);
                    var url = "/ASSAssetAcquisition/GetAcceptanceMemoInfo?IDAcceptanceMemo=" + res[0];
                    $.getJSON(url, function (data) {
                        document.getElementById('Vendor').value = data.VendorID + "-" + data.VendorName;
                        $('#Vendor').prop('value', data.VendorName);
                        document.getElementById('Vendor').readOnly = true;

                        document.getElementById('PoNo').value = data.PoNo;
                        $('#PoNo').prop('value', data.PoNo);
                        document.getElementById('PoNo').readOnly = true;
                        //$('#Vendor').prop('value', data.VendorID + "-" + data.VendorName);
                        //$('#PoNo').prop('value', data.PoNo);
                    });
                }

                //function OnSelectProfessionalName(e) {
                //    var res = this.dataItem(e.item).split("-")
                //    //var res = this.dataItem(e.item).split("-")
                //    //alert("Acceptance Memo ID : " + res[0]);
                //    var dataItem = this.dataItem(e.item);
                //    var url = "/ASSAssetLoanAndReturn/GetProfessionalInfo?IDProfessional=" + res[0];
                //    $.getJSON(url, function (data) {
                //        document.getElementById('Project').value =  data.ProjectName;
                //        $('#Project').prop('value', data.ProjectName);
                //        document.getElementById('Project').readOnly = true;

                //        document.getElementById('ContactNo').value = data.ContactNo;
                //        $('#ContactNo').prop('ContactNo', data.ContactNo);
                //        document.getElementById('ContactNo').readOnly = true;
                //        //$('#Vendor').prop('value', data.VendorID + "-" + data.VendorName);
                //        //$('#PoNo').prop('value', data.PoNo);
                //    });

                //}


                function OnSelectProfessionalName(e) {
                    var res = this.dataItem(e.item).split("-")
                    //alert("berubah jadiii " + res[0]);
                    var url = "/ASSAssetLoanAndReturn/GetProfMasterInfo?fullname=" + res[0] + "&position=" + res[1];
                    $.getJSON(url, function (data) {
                        //do next
                        document.getElementById('ProjectUnit').value = data.CurrentPosition.Text;
                        //$('#Project').prop('value', data.CurrentPosition.Text);
                        //document.getElementById('Project').readOnly = true;

                        document.getElementById('ContactNo').value = data.MobileNumberOne;
                    })
                }


                function onChange(e) {
                    var container = e.container;

                    var model = e.items[0];

                    if (model.StartTime != null && model.FinishTime != null) {
                        var start = model.StartTime.getHours();
                        var finish = model.FinishTime.getHours();
                        var finishsec = model.FinishTime.getSeconds();
                        var range;
                        var rowgrid = $("#CompensatoryDetails").data("kendoGrid").tbody.find("tr");
                        var i = -1
                        var j = -1
                        rowgrid.each(function (e) {
                            i++;
                            var xdate = $("#Dateid" + i).val();
                            rowgrid.each(function (e) {
                                j++;
                                var ydate = $("#Dateid" + j).val();
                                if (i !== j) {
                                    if (xdate == ydate) {
                                        alert("Date you have chosen already exists, please choose another date..!!")
                                    }
                                }
                            });
                        });

                        if ((finish + finishsec) <= start) {
                            alert("FinishTime can not be smaller than the starttime..!!")
                        }

                        if (start < finish) {
                            range = finish - start

                            if (model.CmpTotalHours != range) {
                                model.set("CmpTotalHours", range);
                            }

                            if (range >= 4) {
                                totday = 1
                            } else {
                                totday = 0.5
                            }

                            if (model.TotalDay != totday) {
                                model.set("TotalDay", totday);
                            }
                        }
                    }
                }


            </script>
        }
